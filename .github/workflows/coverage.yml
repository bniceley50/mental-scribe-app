name: Test Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests with coverage
        run: pnpm test -- --coverage --reporter=verbose
        continue-on-error: true
      
      - name: Generate coverage badge
        run: |
          echo "üìä Generating coverage badges..."
          
          # Create badges directory
          mkdir -p .badges
          
          # This is a placeholder - in production you would:
          # 1. Parse coverage-summary.json
          # 2. Generate SVG badges
          # 3. Commit to gh-pages branch or upload to shields.io
          
          echo "Coverage badge would be generated here"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: mental-scribe-coverage
          fail_ci_if_error: false
          verbose: true
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            
            if (!fs.existsSync('coverage/coverage-summary.json')) {
              console.log('No coverage file found');
              return;
            }
            
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;
            
            const formatPct = (pct) => {
              if (pct >= 80) return `üü¢ ${pct}%`;
              if (pct >= 60) return `üü° ${pct}%`;
              return `üî¥ ${pct}%`;
            };
            
            const comment = `## üìä Test Coverage Report
            
            | Metric | Coverage | Status |
            |--------|----------|--------|
            | **Lines** | ${total.lines.covered}/${total.lines.total} | ${formatPct(total.lines.pct)} |
            | **Statements** | ${total.statements.covered}/${total.statements.total} | ${formatPct(total.statements.pct)} |
            | **Functions** | ${total.functions.covered}/${total.functions.total} | ${formatPct(total.functions.pct)} |
            | **Branches** | ${total.branches.covered}/${total.branches.total} | ${formatPct(total.branches.pct)} |
            
            ### Coverage Threshold: 80%
            
            ${total.lines.pct < 80 ? '‚ö†Ô∏è **Warning:** Line coverage is below 80% threshold' : '‚úÖ **Success:** Coverage meets threshold'}
            
            ---
            <details>
            <summary>üìÅ Coverage by Directory</summary>
            
            | Directory | Lines | Statements | Functions | Branches |
            |-----------|-------|------------|-----------|----------|
            ${Object.entries(coverage)
              .filter(([key]) => key !== 'total')
              .map(([path, data]) => {
                const name = path.replace(process.cwd(), '');
                return `| \`${name}\` | ${data.lines.pct}% | ${data.statements.pct}% | ${data.functions.pct}% | ${data.branches.pct}% |`;
              })
              .join('\n')}
            
            </details>
            `;
            
            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Coverage Report')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  coverage-report:
    name: Generate HTML Report
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests with coverage
        run: pnpm test -- --coverage
      
      - name: Deploy coverage report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./coverage/lcov-report
          destination_dir: coverage
          keep_files: true
