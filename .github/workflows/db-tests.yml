name: db-tests
on:
  push:
    branches: [ hardening/audit-logs-immutability ]
  pull_request:

# Cancel previous runs when a new push is made to the same branch
concurrency:
  group: db-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pgtap:
    runs-on: ubuntu-latest

    services:
      postgres:
        # Use public Supabase PostgreSQL image with pgTAP extension
        image: supabase/postgres:15.1.0.117
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - uses: actions/checkout@v4
      
      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Wait for DB readiness
        run: |
          set -euo pipefail
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..60}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "::error::PostgreSQL failed to become ready after 60 attempts"
              exit 1
            fi
            sleep 2
          done
      
      - name: Verify pgTAP extension availability
        env:
          PGPASSWORD: postgres
        run: |
          set -euo pipefail
          createdb -h localhost -U postgres testdb
          echo "Installing pgTAP extension..."
          psql -h localhost -U postgres -d testdb -v ON_ERROR_STOP=1 -c 'CREATE EXTENSION IF NOT EXISTS pgtap;'
          echo "Verifying pgTAP installation..."
          psql -h localhost -U postgres -d testdb -v ON_ERROR_STOP=1 -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'pgtap';"
      
      - name: Bootstrap schema
        env:
          PGPASSWORD: postgres
        run: |
          set -euo pipefail
          if [ ! -f COMPLETE_SCHEMA_EXPORT.sql ]; then
            echo "::error::COMPLETE_SCHEMA_EXPORT.sql not found"
            exit 1
          fi
          echo "[db-tests] Loading COMPLETE_SCHEMA_EXPORT.sql"
          psql -h localhost -U postgres -d testdb -v ON_ERROR_STOP=1 -f COMPLETE_SCHEMA_EXPORT.sql
      
      - name: Apply migrations (if exist)
        env:
          PGPASSWORD: postgres
        run: |
          set -euo pipefail
          # Check if immutability migration exists, apply if present
          if [ -f supabase/migrations/20251008T190500_audit_logs_immutable.sql ]; then
            echo "[db-tests] Applying immutability migration"
            psql -h localhost -U postgres -d testdb -v ON_ERROR_STOP=1 -f supabase/migrations/20251008T190500_audit_logs_immutable.sql
          else
            echo "[db-tests] No immutability migration found, skipping"
          fi
      
      - name: Run pgTAP tests (if exist)
        env:
          PGPASSWORD: postgres
        run: |
          set -euo pipefail
          # Check if pgTAP tests exist
          if [ -f supabase/tests/pgtap/audit_immutability.sql ]; then
            echo "[db-tests] Running pgTAP tests"
            psql -h localhost -U postgres -d testdb -v ON_ERROR_STOP=1 -f supabase/tests/pgtap/audit_immutability.sql | tee pgtap.out
            if grep -q "not ok" pgtap.out; then
              echo "::error::pgTAP tests reported failures"
              cat pgtap.out
              exit 1
            fi
            echo "âœ“ All pgTAP tests passed"
          else
            echo "::warning::No pgTAP tests found at supabase/tests/pgtap/audit_immutability.sql"
            echo "This workflow will pass but tests should be added for proper validation"
          fi
