name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

# Cancel previous runs when a new push is made to the same branch
concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for leaked secrets
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified

      - name: Run ESLint security rules
        run: npx eslint . --ext .ts,.tsx --max-warnings 0
        continue-on-error: true

      - name: Check for vulnerable dependencies (if Snyk token available)
        if: ${{ secrets.SNYK_TOKEN != '' }}
        run: |
          npm install -g snyk
          snyk test --severity-threshold=high || true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Skip Snyk scan (no token)
        if: ${{ secrets.SNYK_TOKEN == '' }}
        run: |
          echo "::notice::Skipping Snyk scan - SNYK_TOKEN not configured"

      - name: TypeScript type check
        run: npx tsc --noEmit

      - name: Security headers check
        run: |
          echo "Checking for security headers in index.html..."
          grep -q "X-Content-Type-Options" index.html && echo "✓ X-Content-Type-Options found" || echo "✗ Missing X-Content-Type-Options"
          grep -q "X-Frame-Options" index.html && echo "✓ X-Frame-Options found" || echo "✗ Missing X-Frame-Options"
          grep -q "Content-Security-Policy" index.html && echo "✓ Content-Security-Policy found" || echo "⚠ CSP should be added"

      - name: Check for hardcoded secrets in production code
        run: |
          set -euo pipefail
          echo "Scanning production code for potential hardcoded secrets..."
          # Only scan src/ and supabase/functions/ directories, exclude test files
          if grep -r -i "password.*=.*['\"].*['\"]" src/ supabase/functions/ --include="*.ts" --include="*.tsx" --exclude-dir="__tests__" --exclude="*.test.ts" --exclude="*.test.tsx" 2>/dev/null; then
            echo "::error::Found hardcoded password in production code"
            exit 1
          fi
          if grep -r -i "api[_-]?key.*=.*['\"].*['\"]" src/ supabase/functions/ --include="*.ts" --include="*.tsx" --exclude-dir="__tests__" --exclude="*.test.ts" --exclude="*.test.tsx" 2>/dev/null; then
            echo "::error::Found hardcoded API key in production code"
            exit 1
          fi
          if grep -r -i "secret.*=.*['\"].*['\"]" src/ supabase/functions/ --include="*.ts" --include="*.tsx" --exclude-dir="__tests__" --exclude="*.test.ts" --exclude="*.test.tsx" 2>/dev/null; then
            echo "::error::Found hardcoded secret in production code"
            exit 1
          fi
          echo "✓ No hardcoded secrets found in production code"

      - name: Validate environment variables
        run: |
          echo "Checking for proper environment variable usage..."
          ! grep -r "VITE_" src/ --include="*.ts" --include="*.tsx" | grep -v "import.meta.env.VITE_" || echo "✓ All VITE_ vars use import.meta.env"

      - name: Check RLS policies (if Supabase)
        run: |
          if [ -d "supabase/migrations" ]; then
            echo "Checking for RLS policies in migrations..."
            grep -r "ENABLE ROW LEVEL SECURITY" supabase/migrations/ && echo "✓ RLS policies found" || echo "⚠ No RLS policies detected"
          fi

      - name: Security Summary
        if: always()
        run: |
          echo "================================"
          echo "Security Scan Summary"
          echo "================================"
          echo "✓ Dependency audit completed"
          echo "✓ Secret scanning completed"
          echo "✓ Static analysis completed"
          echo "✓ Type checking completed"
          echo "================================"
