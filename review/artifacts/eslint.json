[{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\scripts\\run-all-proof.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\scripts\\security-check.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\scripts\\security-score.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\scripts\\security-secrets.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\ChatInterface.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\ErrorBoundary.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\clientAudit.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\edgeFunctionSecurity.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\examplePrompts.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\exportUtils.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2212,2215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2212,2215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2241,2244],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2241,2244],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2270,2273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2270,2273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2303,2306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2303,2306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport DOMPurify from 'dompurify';\n\n// Mock Supabase client\nvi.mock('@/integrations/supabase/client', () => ({\n  supabase: {\n    from: vi.fn(() => ({\n      select: vi.fn(() => ({\n        eq: vi.fn(() => ({\n          order: vi.fn(() => ({\n            data: [\n              {\n                id: '1',\n                role: 'user',\n                content: 'Test message',\n                created_at: new Date().toISOString(),\n              },\n            ],\n            error: null,\n          })),\n        })),\n      })),\n    })),\n  },\n}));\n\n// Mock sonner toast\nvi.mock('sonner', () => ({\n  toast: {\n    info: vi.fn(),\n    success: vi.fn(),\n    error: vi.fn(),\n  },\n}));\n\ndescribe('Export Utilities', () => {\n  describe('Content Sanitization', () => {\n    it('should sanitize malicious script tags', () => {\n      const maliciousContent = '<script>alert(\"XSS\")</script>Hello World';\n      const sanitized = DOMPurify.sanitize(maliciousContent, { ALLOWED_TAGS: [] });\n      \n      expect(sanitized).not.toContain('<script>');\n      expect(sanitized).toBe('Hello World');\n    });\n\n    it('should sanitize HTML injection attempts', () => {\n      const maliciousContent = '<img src=x onerror=\"alert(1)\">Test';\n      const sanitized = DOMPurify.sanitize(maliciousContent, { ALLOWED_TAGS: [] });\n      \n      expect(sanitized).not.toContain('<img');\n      expect(sanitized).not.toContain('onerror');\n      expect(sanitized).toBe('Test');\n    });\n\n    it('should preserve plain text content', () => {\n      const plainText = 'This is a normal clinical note with no HTML';\n      const sanitized = DOMPurify.sanitize(plainText, { ALLOWED_TAGS: [] });\n      \n      expect(sanitized).toBe(plainText);\n    });\n\n    it('should handle special characters safely', () => {\n      const specialChars = 'Patient reported: \"I feel <anxious> & worried\"';\n      const sanitized = DOMPurify.sanitize(specialChars, { ALLOWED_TAGS: [] });\n      \n      // DOMPurify should handle special chars correctly\n      expect(sanitized).toContain('anxious');\n      expect(sanitized).toContain('&');\n    });\n  });\n\n  describe('DOM Cleanup', () => {\n    let createElementSpy: any;\n    let appendChildSpy: any;\n    let removeChildSpy: any;\n    let revokeObjectURLSpy: any;\n\n    beforeEach(() => {\n      createElementSpy = vi.spyOn(document, 'createElement');\n      appendChildSpy = vi.spyOn(document.body, 'appendChild');\n      removeChildSpy = vi.spyOn(document.body, 'removeChild');\n      revokeObjectURLSpy = vi.spyOn(URL, 'revokeObjectURL');\n    });\n\n    afterEach(() => {\n      vi.restoreAllMocks();\n    });\n\n    it('should create and cleanup anchor element for downloads', () => {\n      const blob = new Blob(['test content'], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const anchor = document.createElement('a');\n      anchor.href = url;\n      anchor.download = 'test.txt';\n\n      // Simulate the triggerDownload pattern\n      document.body.appendChild(anchor);\n      anchor.click();\n      document.body.removeChild(anchor);\n      URL.revokeObjectURL(url);\n\n      expect(appendChildSpy).toHaveBeenCalled();\n      expect(removeChildSpy).toHaveBeenCalled();\n      expect(revokeObjectURLSpy).toHaveBeenCalledWith(url);\n    });\n\n    it('should always cleanup even if click fails', () => {\n      const blob = new Blob(['test'], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const anchor = document.createElement('a');\n      anchor.href = url;\n      anchor.download = 'test.txt';\n\n      // Simulate error during click\n      const clickSpy = vi.spyOn(anchor, 'click').mockImplementation(() => {\n        throw new Error('Click failed');\n      });\n\n      try {\n        document.body.appendChild(anchor);\n        anchor.click();\n      } catch (error) {\n        // Expected error\n      } finally {\n        document.body.removeChild(anchor);\n        URL.revokeObjectURL(url);\n      }\n\n      expect(removeChildSpy).toHaveBeenCalled();\n      expect(revokeObjectURLSpy).toHaveBeenCalledWith(url);\n      \n      clickSpy.mockRestore();\n    });\n  });\n\n  describe('Filename Sanitization', () => {\n    it('should sanitize filenames to prevent directory traversal', () => {\n      const maliciousFilename = '../../../etc/passwd';\n      const sanitized = maliciousFilename.replace(/[^a-z0-9]/gi, '_');\n      \n      expect(sanitized).not.toContain('..');\n      expect(sanitized).not.toContain('/');\n      expect(sanitized).toBe('_________etc_passwd');\n    });\n\n    it('should handle special characters in filenames', () => {\n      const filename = 'My Notes: Session #1 (2024)';\n      const sanitized = filename.replace(/[^a-z0-9]/gi, '_');\n      \n      expect(sanitized).toBe('My_Notes__Session__1__2024_');\n      expect(sanitized).toMatch(/^[a-zA-Z0-9_]+$/);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\fileUpload.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3572,3575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3572,3575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4000,4003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4000,4003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4504,4507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4504,4507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4943,4946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4943,4946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5444,5447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5444,5447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":186,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5717,5720],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5717,5720],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6114,6117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6114,6117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6542,6545],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6542,6545],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":231,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7277,7280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7277,7280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8149,8152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8149,8152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8781,8784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8781,8784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":286,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":286,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8876,8879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8876,8879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":303,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9508,9511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9508,9511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":307,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9603,9606],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9603,9606],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport {\n  extractTextFromFile,\n  uploadFileToStorage,\n  saveFileMetadata,\n  deleteFile,\n} from '../fileUpload';\nimport { supabase } from '@/integrations/supabase/client';\n\nvi.mock('@/integrations/supabase/client', () => ({\n  supabase: {\n    auth: {\n      getUser: vi.fn(),\n    },\n    storage: {\n      from: vi.fn(),\n    },\n    from: vi.fn(),\n  },\n}));\n\nvi.mock('sonner', () => ({\n  toast: {\n    error: vi.fn(),\n    success: vi.fn(),\n  },\n}));\n\ndescribe('File Upload - Edge Cases & Security', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('extractTextFromFile - Validation', () => {\n    it('should reject files exceeding 10MB', async () => {\n      const largeFile = new File(['x'.repeat(11 * 1024 * 1024)], 'large.pdf', {\n        type: 'application/pdf',\n      });\n\n      await expect(extractTextFromFile(largeFile)).rejects.toThrow(\n        'File size exceeds maximum allowed size of 10MB'\n      );\n    });\n\n    it('should reject file exactly at size limit boundary', async () => {\n      const maxFile = new File(['x'.repeat(10 * 1024 * 1024 + 1)], 'max.pdf', {\n        type: 'application/pdf',\n      });\n\n      await expect(extractTextFromFile(maxFile)).rejects.toThrow(\n        'File size exceeds maximum allowed size'\n      );\n    });\n\n    it('should reject PDF without valid magic bytes', async () => {\n      const fakePDF = new File(['Not a real PDF'], 'fake.pdf', {\n        type: 'application/pdf',\n      });\n\n      await expect(extractTextFromFile(fakePDF)).rejects.toThrow(\n        'Invalid PDF file format'\n      );\n    });\n\n    it('should reject unsupported file types', async () => {\n      const unsupportedFile = new File(['content'], 'file.docx', {\n        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      });\n\n      await expect(extractTextFromFile(unsupportedFile)).rejects.toThrow(\n        'Unsupported file type'\n      );\n    });\n\n    it('should sanitize extracted text to prevent XSS', async () => {\n      const maliciousText = '<script>alert(\"XSS\")</script>Normal text';\n      const textFile = new File([maliciousText], 'malicious.txt', {\n        type: 'text/plain',\n      });\n\n      const result = await extractTextFromFile(textFile);\n      \n      expect(result).not.toContain('<script>');\n      expect(result).toContain('Normal text');\n    });\n\n    it('should handle empty text files', async () => {\n      const emptyFile = new File([''], 'empty.txt', {\n        type: 'text/plain',\n      });\n\n      const result = await extractTextFromFile(emptyFile);\n      expect(result).toBe('');\n    });\n\n    it('should handle files with only whitespace', async () => {\n      const whitespaceFile = new File(['   \\n\\n\\t  '], 'whitespace.txt', {\n        type: 'text/plain',\n      });\n\n      const result = await extractTextFromFile(whitespaceFile);\n      expect(result.trim()).toBe('');\n    });\n  });\n\n  describe('uploadFileToStorage - Security', () => {\n    it('should reject upload when user is not authenticated', async () => {\n      vi.mocked(supabase.auth.getUser).mockResolvedValue({\n        data: { user: null },\n        error: null,\n      });\n\n      const file = new File(['content'], 'test.txt', { type: 'text/plain' });\n      const result = await uploadFileToStorage(file, 'conv-123');\n\n      expect(result).toBeNull();\n    });\n\n    it('should generate user-scoped file paths', async () => {\n      const mockUser = { id: 'user-123' };\n      vi.mocked(supabase.auth.getUser).mockResolvedValue({\n        data: { user: mockUser as any },\n        error: null,\n      });\n\n      const mockUpload = vi.fn().mockResolvedValue({ data: { path: 'test-path' }, error: null });\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://signed-url.com' },\n        error: null,\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        upload: mockUpload,\n        createSignedUrl: mockCreateSignedUrl,\n      } as any);\n\n      const file = new File(['content'], 'test.txt', { type: 'text/plain' });\n      await uploadFileToStorage(file, 'conv-456');\n\n      expect(mockUpload).toHaveBeenCalledWith(\n        expect.stringContaining('user-123/conv-456/'),\n        file,\n        expect.any(Object)\n      );\n    });\n\n    it('should use signed URLs instead of public URLs', async () => {\n      const mockUser = { id: 'user-123' };\n      vi.mocked(supabase.auth.getUser).mockResolvedValue({\n        data: { user: mockUser as any },\n        error: null,\n      });\n\n      const mockUpload = vi.fn().mockResolvedValue({ data: { path: 'test-path' }, error: null });\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://signed-url.com/temp-token' },\n        error: null,\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        upload: mockUpload,\n        createSignedUrl: mockCreateSignedUrl,\n      } as any);\n\n      const file = new File(['content'], 'test.txt', { type: 'text/plain' });\n      const result = await uploadFileToStorage(file, 'conv-456');\n\n      expect(mockCreateSignedUrl).toHaveBeenCalledWith(expect.any(String), 3600);\n      expect(result?.url).toContain('signed-url.com');\n    });\n\n    it('should handle storage quota exceeded error', async () => {\n      const mockUser = { id: 'user-123' };\n      vi.mocked(supabase.auth.getUser).mockResolvedValue({\n        data: { user: mockUser as any },\n        error: null,\n      });\n\n      const mockUpload = vi.fn().mockResolvedValue({\n        data: null,\n        error: { message: 'Storage quota exceeded' },\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        upload: mockUpload,\n      } as any);\n\n      const file = new File(['content'], 'test.txt', { type: 'text/plain' });\n      const result = await uploadFileToStorage(file, 'conv-456');\n\n      expect(result).toBeNull();\n    });\n\n    it('should prevent file path traversal attacks', async () => {\n      const mockUser = { id: 'user-123' };\n      vi.mocked(supabase.auth.getUser).mockResolvedValue({\n        data: { user: mockUser as any },\n        error: null,\n      });\n\n      const mockUpload = vi.fn().mockResolvedValue({ data: { path: 'test-path' }, error: null });\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://signed-url.com' },\n        error: null,\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        upload: mockUpload,\n        createSignedUrl: mockCreateSignedUrl,\n      } as any);\n\n      const file = new File(['content'], '../../etc/passwd', { type: 'text/plain' });\n      await uploadFileToStorage(file, 'conv-456');\n\n      const uploadPath = mockUpload.mock.calls[0][0];\n      expect(uploadPath).toMatch(/^user-123\\/conv-456\\//);\n      expect(uploadPath).not.toContain('..');\n    });\n  });\n\n  describe('saveFileMetadata - Data Integrity', () => {\n    it('should sanitize file metadata before saving', async () => {\n      const mockInsert = vi.fn().mockReturnValue({\n        select: vi.fn().mockReturnValue({\n          single: vi.fn().mockResolvedValue({ data: { id: 'file-123' }, error: null }),\n        }),\n      });\n\n      vi.mocked(supabase.from).mockReturnValue({\n        insert: mockInsert,\n      } as any);\n\n      const maliciousFileName = '<script>alert(\"XSS\")</script>note.pdf';\n      await saveFileMetadata(\n        'conv-123',\n        maliciousFileName,\n        'application/pdf',\n        'https://safe-url.com',\n        'Safe content'\n      );\n\n      const insertedData = mockInsert.mock.calls[0][0][0];\n      expect(insertedData.file_name).toBe(maliciousFileName); // Stored as-is in DB\n      // UI should handle sanitization when displaying\n    });\n\n    it('should handle duplicate file insertions', async () => {\n      const mockInsert = vi.fn().mockReturnValue({\n        select: vi.fn().mockReturnValue({\n          single: vi.fn().mockResolvedValue({\n            data: null,\n            error: { code: '23505', message: 'duplicate key' },\n          }),\n        }),\n      });\n\n      vi.mocked(supabase.from).mockReturnValue({\n        insert: mockInsert,\n      } as any);\n\n      const result = await saveFileMetadata(\n        'conv-123',\n        'duplicate.pdf',\n        'application/pdf',\n        'https://url.com',\n        'content'\n      );\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('deleteFile - Cascade & Cleanup', () => {\n    it('should delete from both storage and database', async () => {\n      const mockRemove = vi.fn().mockResolvedValue({ error: null });\n      const mockDelete = vi.fn().mockReturnValue({\n        eq: vi.fn().mockResolvedValue({ error: null }),\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        remove: mockRemove,\n      } as any);\n\n      vi.mocked(supabase.from).mockReturnValue({\n        delete: mockDelete,\n      } as any);\n\n      const result = await deleteFile('file-123', 'user-123/conv-456/file.pdf');\n\n      expect(mockRemove).toHaveBeenCalledWith(['user-123/conv-456/file.pdf']);\n      expect(mockDelete).toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n\n    it('should handle partial deletion failures gracefully', async () => {\n      const mockRemove = vi.fn().mockResolvedValue({ error: null });\n      const mockDelete = vi.fn().mockReturnValue({\n        eq: vi.fn().mockResolvedValue({ error: { message: 'DB error' } }),\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        remove: mockRemove,\n      } as any);\n\n      vi.mocked(supabase.from).mockReturnValue({\n        delete: mockDelete,\n      } as any);\n\n      const result = await deleteFile('file-123', 'user-123/conv-456/file.pdf');\n\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('Accessibility - File Upload UI', () => {\n    it('should preserve accessible file names for screen readers', async () => {\n      const file = new File(['content'], 'Patient Assessment Form.pdf', {\n        type: 'application/pdf',\n      });\n\n      // File name should remain readable and descriptive\n      expect(file.name).toMatch(/^[a-zA-Z0-9\\s.]+$/);\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\noteTemplates.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\part2Consent.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\passwordSecurity.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5421,5424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5421,5424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5538,5541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5538,5541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\nimport { isPasswordLeaked } from '../passwordSecurity';\n\ndescribe('Password Security - HIBP Integration', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  describe('isPasswordLeaked', () => {\n    it('should return true for known leaked password', async () => {\n      // \"password123\" is a commonly leaked password\n      const result = await isPasswordLeaked('password123');\n      expect(result).toBe(true);\n    });\n\n    it('should return false for strong unique password', async () => {\n      // Very unlikely to be in breach database\n      const result = await isPasswordLeaked('xK9#mP2$vL8@nQ4!wR7^yT6&uI3*oE5');\n      expect(result).toBe(false);\n    });\n\n    it('should fail closed (return true) on API error', async () => {\n      // Mock fetch to simulate API failure\n      global.fetch = vi.fn().mockRejectedValue(new Error('Network error'));\n      \n      const result = await isPasswordLeaked('test-password');\n      expect(result).toBe(true); // Should fail closed for security\n    });\n\n    it('should fail closed (return true) on API timeout', async () => {\n      // Mock fetch to simulate timeout\n      global.fetch = vi.fn().mockImplementation(() => \n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Timeout')), 100)\n        )\n      );\n      \n      const result = await isPasswordLeaked('test-password');\n      expect(result).toBe(true); // Should fail closed for security\n    });\n\n    it('should only send first 5 characters of hash (k-anonymity)', async () => {\n      const mockFetch = vi.fn().mockResolvedValue({\n        ok: true,\n        text: async () => ''\n      });\n      global.fetch = mockFetch;\n\n      await isPasswordLeaked('test-password');\n      \n      // Verify only first 5 chars of SHA-1 hash are sent\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('https://api.pwnedpasswords.com/range/')\n      );\n      const calledUrl = mockFetch.mock.calls[0][0] as string;\n      const hashPrefix = calledUrl.split('/range/')[1];\n      expect(hashPrefix.length).toBe(5);\n    });\n\n    it('should handle empty password', async () => {\n      const result = await isPasswordLeaked('');\n      expect(result).toBe(true); // Empty passwords should be considered leaked\n    });\n\n    it('should be case-insensitive', async () => {\n      const result1 = await isPasswordLeaked('Password123');\n      const result2 = await isPasswordLeaked('PASSWORD123');\n      const result3 = await isPasswordLeaked('password123');\n      \n      // All variations should return the same result\n      expect(result1).toBe(result2);\n      expect(result2).toBe(result3);\n    });\n\n    it('should handle special characters in password', async () => {\n      const result = await isPasswordLeaked('P@ssw0rd!#$%^&*()');\n      expect(typeof result).toBe('boolean');\n    });\n\n    it('should handle non-ASCII characters', async () => {\n      const result = await isPasswordLeaked('пароль123');\n      expect(typeof result).toBe('boolean');\n    });\n\n    it('should fail closed on malformed API response', async () => {\n      global.fetch = vi.fn().mockResolvedValue({\n        ok: true,\n        text: async () => 'invalid-response-format'\n      });\n      \n      const result = await isPasswordLeaked('test-password');\n      expect(typeof result).toBe('boolean');\n    });\n\n    it('should handle 503 service unavailable gracefully', async () => {\n      global.fetch = vi.fn().mockResolvedValue({\n        ok: false,\n        status: 503,\n        text: async () => 'Service Unavailable'\n      });\n      \n      const result = await isPasswordLeaked('test-password');\n      expect(result).toBe(true); // Should fail closed\n    });\n  });\n\n  describe('Security Properties', () => {\n    it('should never send full password over network', async () => {\n      const mockFetch = vi.fn().mockResolvedValue({\n        ok: true,\n        text: async () => ''\n      });\n      global.fetch = mockFetch;\n\n      const password = 'my-secret-password';\n      await isPasswordLeaked(password);\n      \n      const calledUrl = mockFetch.mock.calls[0][0] as string;\n      expect(calledUrl).not.toContain(password);\n    });\n\n    it('should use HTTPS for API calls', async () => {\n      const mockFetch = vi.fn().mockResolvedValue({\n        ok: true,\n        text: async () => ''\n      });\n      global.fetch = mockFetch;\n\n      await isPasswordLeaked('test');\n      \n      const calledUrl = mockFetch.mock.calls[0][0] as string;\n      expect(calledUrl).toMatch(/^https:\\/\\//);\n    });\n\n    it('should complete in reasonable time (< 5 seconds)', async () => {\n      const startTime = Date.now();\n      await isPasswordLeaked('test-password');\n      const endTime = Date.now();\n      \n      expect(endTime - startTime).toBeLessThan(5000);\n    });\n  });\n\n  describe('Edge Cases', () => {\n    it('should handle very long passwords', async () => {\n      const longPassword = 'a'.repeat(1000);\n      const result = await isPasswordLeaked(longPassword);\n      expect(typeof result).toBe('boolean');\n    });\n\n    it('should handle whitespace-only passwords', async () => {\n      const result = await isPasswordLeaked('   ');\n      expect(result).toBe(true);\n    });\n\n    it('should handle null/undefined gracefully', async () => {\n      const result1 = await isPasswordLeaked(null as any);\n      expect(typeof result1).toBe('boolean');\n      \n      const result2 = await isPasswordLeaked(undefined as any);\n      expect(typeof result2).toBe('boolean');\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\rlsPolicies.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\security-tests\\unit\\signedUrls.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[852,855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[852,855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1559,1562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1559,1562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":63,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2144,2147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2144,2147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2548,2551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2548,2551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3138,3141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3138,3141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3616,3619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3616,3619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4615,4618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4615,4618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5152,5155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5152,5155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5934,5937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5934,5937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":194,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6425,6428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6425,6428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":214,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7048,7051],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7048,7051],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7539,7542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7539,7542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8320,8323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8320,8323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9024,9027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9024,9027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9645,9648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9645,9648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\nimport { generateSignedUrl, refreshFileUrl } from '../signedUrls';\nimport { supabase } from '@/integrations/supabase/client';\n\nvi.mock('@/integrations/supabase/client', () => ({\n  supabase: {\n    storage: {\n      from: vi.fn()\n    }\n  }\n}));\n\ndescribe('Signed URL Security', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  describe('generateSignedUrl', () => {\n    it('should generate signed URL with default expiry (1 hour)', async () => {\n      const mockSignedUrl = 'https://example.com/signed-url?token=abc123&exp=3600';\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: mockSignedUrl },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await generateSignedUrl('clinical-documents', 'test/file.pdf');\n\n      expect(result).toBe(mockSignedUrl);\n      expect(supabase.storage.from).toHaveBeenCalledWith('clinical-documents');\n      expect(mockCreateSignedUrl).toHaveBeenCalledWith('test/file.pdf', 3600);\n    });\n\n    it('should generate signed URL with custom expiry', async () => {\n      const mockSignedUrl = 'https://example.com/signed-url?token=def456&exp=7200';\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: mockSignedUrl },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await generateSignedUrl('clinical-documents', 'test/file.pdf', 7200);\n\n      expect(result).toBe(mockSignedUrl);\n      expect(mockCreateSignedUrl).toHaveBeenCalledWith('test/file.pdf', 7200);\n    });\n\n    it('should return null on error', async () => {\n      const mockError = { message: 'Storage error', statusCode: '404' };\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: null,\n        error: mockError\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await generateSignedUrl('clinical-documents', 'nonexistent.pdf');\n\n      expect(result).toBeNull();\n    });\n\n    it('should handle network errors gracefully', async () => {\n      const mockCreateSignedUrl = vi.fn().mockRejectedValue(new Error('Network error'));\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await generateSignedUrl('clinical-documents', 'test.pdf');\n\n      expect(result).toBeNull();\n    });\n\n    it('should support different buckets', async () => {\n      const buckets = ['clinical-documents', 'recordings', 'avatars'];\n      \n      for (const bucket of buckets) {\n        const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n          data: { signedUrl: `https://example.com/${bucket}/file` },\n          error: null\n        });\n\n        vi.mocked(supabase.storage.from).mockReturnValue({\n          createSignedUrl: mockCreateSignedUrl\n        } as any);\n\n        await generateSignedUrl(bucket, 'test.pdf');\n        expect(supabase.storage.from).toHaveBeenCalledWith(bucket);\n      }\n    });\n\n    it('should handle paths with special characters', async () => {\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://example.com/signed' },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const paths = [\n        'folder/file with spaces.pdf',\n        'folder/file-with-dashes.pdf',\n        'folder/file_with_underscores.pdf',\n        'deep/nested/folder/file.pdf'\n      ];\n\n      for (const path of paths) {\n        await generateSignedUrl('clinical-documents', path);\n        expect(mockCreateSignedUrl).toHaveBeenCalledWith(path, 3600);\n      }\n    });\n  });\n\n  describe('refreshFileUrl', () => {\n    it('should extract path from signed URL and refresh', async () => {\n      const existingUrl = 'https://example.supabase.co/storage/v1/object/sign/clinical-documents/test/file.pdf?token=old';\n      const newSignedUrl = 'https://example.supabase.co/storage/v1/object/sign/clinical-documents/test/file.pdf?token=new';\n      \n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: newSignedUrl },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await refreshFileUrl(existingUrl);\n\n      expect(result).toBe(newSignedUrl);\n    });\n\n    it('should use default bucket when not specified', async () => {\n      const existingUrl = 'https://example.supabase.co/storage/v1/object/sign/some-bucket/file.pdf';\n      \n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'new-url' },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      await refreshFileUrl(existingUrl);\n      \n      expect(supabase.storage.from).toHaveBeenCalledWith('clinical-documents');\n    });\n\n    it('should return null for invalid URLs', async () => {\n      const invalidUrl = 'not-a-valid-url';\n      const result = await refreshFileUrl(invalidUrl);\n      \n      expect(result).toBeNull();\n    });\n\n    it('should handle refresh errors gracefully', async () => {\n      const existingUrl = 'https://example.supabase.co/storage/v1/object/sign/clinical-documents/file.pdf';\n      \n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: null,\n        error: { message: 'File not found' }\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await refreshFileUrl(existingUrl);\n      \n      expect(result).toBeNull();\n    });\n  });\n\n  describe('Security Properties', () => {\n    it('should never generate URLs without expiry', async () => {\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://example.com/signed' },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      await generateSignedUrl('clinical-documents', 'test.pdf');\n      \n      // Verify expiry is always provided\n      expect(mockCreateSignedUrl).toHaveBeenCalledWith(\n        expect.any(String),\n        expect.any(Number)\n      );\n    });\n\n    it('should use HTTPS for all signed URLs', async () => {\n      const mockSignedUrl = 'https://example.com/signed-url';\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: mockSignedUrl },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      const result = await generateSignedUrl('clinical-documents', 'test.pdf');\n      \n      expect(result).toMatch(/^https:\\/\\//);\n    });\n\n    it('should limit expiry time to prevent indefinite access', async () => {\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://example.com/signed' },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      // Even if caller requests very long expiry, should have reasonable maximum\n      const maxExpiry = 86400; // 24 hours\n      await generateSignedUrl('clinical-documents', 'test.pdf', maxExpiry);\n      \n      const [[, expiry]] = mockCreateSignedUrl.mock.calls;\n      expect(expiry).toBeLessThanOrEqual(maxExpiry);\n    });\n\n    it('should not expose file paths in errors', async () => {\n      const consoleErrorSpy = vi.spyOn(console, 'error').mockImplementation(() => {});\n      const sensitivePath = 'patients/sensitive/medical-record.pdf';\n      \n      const mockCreateSignedUrl = vi.fn().mockRejectedValue(\n        new Error('Storage error')\n      );\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      await generateSignedUrl('clinical-documents', sensitivePath);\n      \n      // Error logging should not expose full paths\n      const errorCalls = consoleErrorSpy.mock.calls.flat().join(' ');\n      expect(errorCalls).not.toContain(sensitivePath);\n      \n      consoleErrorSpy.mockRestore();\n    });\n  });\n\n  describe('PHI/Part 2 Compliance', () => {\n    it('should always use signed URLs for clinical documents', async () => {\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://example.com/signed' },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      // Clinical documents should never use public URLs\n      const result = await generateSignedUrl('clinical-documents', 'patient-notes.pdf');\n      \n      expect(result).toBeTruthy();\n      expect(result).toContain('sign'); // Signed URL contains 'sign' in path\n    });\n\n    it('should use short expiry for Part 2 protected data', async () => {\n      const mockCreateSignedUrl = vi.fn().mockResolvedValue({\n        data: { signedUrl: 'https://example.com/signed' },\n        error: null\n      });\n\n      vi.mocked(supabase.storage.from).mockReturnValue({\n        createSignedUrl: mockCreateSignedUrl\n      } as any);\n\n      // Part 2 data should use shorter expiry for additional security\n      const shortExpiry = 900; // 15 minutes\n      await generateSignedUrl('clinical-documents', 'part2-data.pdf', shortExpiry);\n      \n      expect(mockCreateSignedUrl).toHaveBeenCalledWith(\n        'part2-data.pdf',\n        shortExpiry\n      );\n    });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\AdvancedAnalysis.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5325,5328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5325,5328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Brain, \n  Sparkles, \n  AlertTriangle, \n  FileText, \n  Activity,\n  Pill,\n  Stethoscope,\n  HeartPulse\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface AdvancedAnalysisProps {\n  noteContent: string;\n  conversationId: string;\n}\n\ninterface MedicalEntities {\n  diagnoses: string[];\n  medications: string[];\n  symptoms: string[];\n  procedures: string[];\n  vitals: string[];\n  risk_factors: string[];\n  mental_status: {\n    mood?: string;\n    affect?: string;\n    thought_process?: string;\n    orientation?: string;\n  };\n  clinical_concerns: string[];\n}\n\nexport const AdvancedAnalysis = ({ noteContent, conversationId }: AdvancedAnalysisProps) => {\n  const { toast } = useToast();\n  const [loading, setLoading] = useState(false);\n  const [activeAnalysis, setActiveAnalysis] = useState<string | null>(null);\n  const [results, setResults] = useState<{\n    medical_entities?: MedicalEntities;\n    clinical_summary?: string;\n    risk_assessment?: string;\n  }>({});\n\n  const runAnalysis = async (analysisType: string) => {\n    if (!noteContent.trim()) {\n      toast({\n        title: \"No content\",\n        description: \"Please enter some clinical notes first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setLoading(true);\n    setActiveAnalysis(analysisType);\n\n    try {\n      // Get the user's session token\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error(\"Not authenticated\");\n      }\n\n      // Use fetch directly for streaming responses\n      const response = await fetch(\n        `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/analyze-clinical-notes`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${session.access_token}`,\n            // Include publishable API key to satisfy the gateway requirements\n            \"apikey\": import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY,\n          },\n          body: JSON.stringify({\n            notes: noteContent,\n            action: analysisType,\n            conversation_history: [],\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        if (response.status === 429) {\n          throw new Error(\"Rate limit exceeded. Please try again in a moment.\");\n        }\n        if (response.status === 402) {\n          throw new Error(\"AI service credits depleted. Please contact support.\");\n        }\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Request failed: ${response.status}`);\n      }\n\n      if (!response.body) {\n        throw new Error(\"No response body\");\n      }\n\n      // Parse the streaming response\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let fullResponse = \"\";\n      let buffer = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split(\"\\n\");\n        buffer = lines.pop() || \"\";\n\n        for (const line of lines) {\n          if (line.startsWith(\"data: \")) {\n            const jsonStr = line.slice(6);\n            if (jsonStr === \"[DONE]\") {\n              break;\n            }\n\n            try {\n              const parsed = JSON.parse(jsonStr);\n              const content = parsed.choices?.[0]?.delta?.content;\n              if (content) {\n                fullResponse += content;\n              }\n            } catch (e) {\n              console.warn(\"Failed to parse SSE data:\", e);\n            }\n          }\n        }\n      }\n\n      // Store the result\n      if (analysisType === \"medical_entities\") {\n        try {\n          // Sanitize possible code fences or extra text before parsing\n          let jsonText = fullResponse.trim();\n          if (jsonText.startsWith(\"```\")) {\n            jsonText = jsonText.replace(/^```(?:json)?/i, \"\").replace(/```$/i, \"\").trim();\n          }\n          const firstBrace = jsonText.indexOf(\"{\");\n          const lastBrace = jsonText.lastIndexOf(\"}\");\n          if (firstBrace !== -1 && lastBrace !== -1) {\n            jsonText = jsonText.slice(firstBrace, lastBrace + 1);\n          }\n          const entities = JSON.parse(jsonText);\n          setResults(prev => ({ ...prev, medical_entities: entities }));\n        } catch (e) {\n          console.error(\"Failed to parse medical entities:\", e, fullResponse);\n          toast({\n            title: \"Parse Error\",\n            description: \"Unable to parse medical entities from response\",\n            variant: \"destructive\",\n          });\n          return;\n        }\n      } else {\n        setResults(prev => ({ ...prev, [analysisType]: fullResponse }));\n      }\n\n      toast({\n        title: \"Analysis Complete\",\n        description: `${analysisType.replace(/_/g, \" \")} completed successfully`,\n      });\n    } catch (error: any) {\n      console.error(\"Analysis error:\", error);\n      toast({\n        title: \"Analysis Failed\",\n        description: error.message || \"Unable to complete analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n      setActiveAnalysis(null);\n    }\n  };\n\n  return (\n    <Card className=\"mt-4\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Sparkles className=\"h-5 w-5 text-primary\" />\n          Advanced AI Analysis\n        </CardTitle>\n        <CardDescription>\n          Extract medical entities, assess risk, and generate comprehensive clinical summaries\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3 mb-6\">\n          <Button\n            onClick={() => runAnalysis(\"medical_entities\")}\n            disabled={loading}\n            variant=\"outline\"\n            className=\"h-auto py-4 flex flex-col items-start gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <Brain className=\"h-4 w-4\" />\n              <span className=\"font-semibold\">Extract Entities</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground text-left\">\n              Diagnoses, medications, symptoms, vitals\n            </span>\n          </Button>\n\n          <Button\n            onClick={() => runAnalysis(\"clinical_summary\")}\n            disabled={loading}\n            variant=\"outline\"\n            className=\"h-auto py-4 flex flex-col items-start gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"h-4 w-4\" />\n              <span className=\"font-semibold\">Clinical Summary</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground text-left\">\n              Comprehensive assessment and recommendations\n            </span>\n          </Button>\n\n          <Button\n            onClick={() => runAnalysis(\"risk_assessment\")}\n            disabled={loading}\n            variant=\"outline\"\n            className=\"h-auto py-4 flex flex-col items-start gap-2\"\n          >\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span className=\"font-semibold\">Risk Assessment</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground text-left\">\n              Safety evaluation and protective factors\n            </span>\n          </Button>\n        </div>\n\n        {loading && (\n          <div className=\"text-center py-8\">\n            <div className=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]\" />\n            <p className=\"mt-2 text-sm text-muted-foreground\">\n              Running {activeAnalysis?.replace(/_/g, \" \")}...\n            </p>\n          </div>\n        )}\n\n        {results.medical_entities && (\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Medical Entity Extraction</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"diagnoses\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"diagnoses\">Diagnoses</TabsTrigger>\n                  <TabsTrigger value=\"medications\">Medications</TabsTrigger>\n                  <TabsTrigger value=\"symptoms\">Symptoms</TabsTrigger>\n                  <TabsTrigger value=\"clinical\">Clinical</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"diagnoses\" className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Stethoscope className=\"h-4 w-4 text-muted-foreground\" />\n                    <h4 className=\"font-semibold\">Diagnoses & Conditions</h4>\n                  </div>\n                  {results.medical_entities.diagnoses.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {results.medical_entities.diagnoses.map((dx, i) => (\n                        <Badge key={i} variant=\"secondary\">{dx}</Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No diagnoses extracted</p>\n                  )}\n\n                  <div className=\"flex items-center gap-2 mt-4 mb-2\">\n                    <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n                    <h4 className=\"font-semibold\">Risk Factors</h4>\n                  </div>\n                  {results.medical_entities.risk_factors.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-2\">\n                      {results.medical_entities.risk_factors.map((risk, i) => (\n                        <Badge key={i} variant=\"destructive\">{risk}</Badge>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No risk factors identified</p>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"medications\" className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Pill className=\"h-4 w-4 text-muted-foreground\" />\n                    <h4 className=\"font-semibold\">Medications</h4>\n                  </div>\n                  {results.medical_entities.medications.length > 0 ? (\n                    <div className=\"space-y-1\">\n                      {results.medical_entities.medications.map((med, i) => (\n                        <div key={i} className=\"p-2 bg-secondary rounded-md text-sm\">\n                          {med}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No medications mentioned</p>\n                  )}\n\n                  <div className=\"flex items-center gap-2 mt-4 mb-2\">\n                    <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                    <h4 className=\"font-semibold\">Procedures & Interventions</h4>\n                  </div>\n                  {results.medical_entities.procedures.length > 0 ? (\n                    <div className=\"space-y-1\">\n                      {results.medical_entities.procedures.map((proc, i) => (\n                        <div key={i} className=\"p-2 bg-secondary rounded-md text-sm\">\n                          {proc}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No procedures documented</p>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"symptoms\" className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <HeartPulse className=\"h-4 w-4 text-muted-foreground\" />\n                    <h4 className=\"font-semibold\">Reported Symptoms</h4>\n                  </div>\n                  {results.medical_entities.symptoms.length > 0 ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                      {results.medical_entities.symptoms.map((symptom, i) => (\n                        <div key={i} className=\"p-2 bg-secondary rounded-md text-sm\">\n                          • {symptom}\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No symptoms documented</p>\n                  )}\n\n                  {results.medical_entities.vitals.length > 0 && (\n                    <>\n                      <div className=\"flex items-center gap-2 mt-4 mb-2\">\n                        <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                        <h4 className=\"font-semibold\">Vital Signs</h4>\n                      </div>\n                      <div className=\"space-y-1\">\n                        {results.medical_entities.vitals.map((vital, i) => (\n                          <div key={i} className=\"p-2 bg-secondary rounded-md text-sm\">\n                            {vital}\n                          </div>\n                        ))}\n                      </div>\n                    </>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"clinical\" className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Brain className=\"h-4 w-4 text-muted-foreground\" />\n                    <h4 className=\"font-semibold\">Mental Status Examination</h4>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                    {results.medical_entities.mental_status.mood && (\n                      <div className=\"p-3 bg-secondary rounded-md\">\n                        <div className=\"text-xs text-muted-foreground mb-1\">Mood</div>\n                        <div className=\"text-sm\">{results.medical_entities.mental_status.mood}</div>\n                      </div>\n                    )}\n                    {results.medical_entities.mental_status.affect && (\n                      <div className=\"p-3 bg-secondary rounded-md\">\n                        <div className=\"text-xs text-muted-foreground mb-1\">Affect</div>\n                        <div className=\"text-sm\">{results.medical_entities.mental_status.affect}</div>\n                      </div>\n                    )}\n                    {results.medical_entities.mental_status.thought_process && (\n                      <div className=\"p-3 bg-secondary rounded-md\">\n                        <div className=\"text-xs text-muted-foreground mb-1\">Thought Process</div>\n                        <div className=\"text-sm\">{results.medical_entities.mental_status.thought_process}</div>\n                      </div>\n                    )}\n                    {results.medical_entities.mental_status.orientation && (\n                      <div className=\"p-3 bg-secondary rounded-md\">\n                        <div className=\"text-xs text-muted-foreground mb-1\">Orientation</div>\n                        <div className=\"text-sm\">{results.medical_entities.mental_status.orientation}</div>\n                      </div>\n                    )}\n                  </div>\n\n                  {results.medical_entities.clinical_concerns.length > 0 && (\n                    <>\n                      <div className=\"flex items-center gap-2 mt-4 mb-2\">\n                        <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n                        <h4 className=\"font-semibold\">Clinical Concerns</h4>\n                      </div>\n                      <div className=\"space-y-2\">\n                        {results.medical_entities.clinical_concerns.map((concern, i) => (\n                          <div key={i} className=\"p-2 bg-destructive/10 border-l-4 border-destructive rounded text-sm\">\n                            {concern}\n                          </div>\n                        ))}\n                      </div>\n                    </>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        )}\n\n        {results.clinical_summary && (\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Clinical Summary\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\n                <div className=\"whitespace-pre-wrap\">{results.clinical_summary}</div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {results.risk_assessment && (\n          <Card className=\"mb-4 border-destructive/50\">\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n                Risk Assessment\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\n                <div className=\"whitespace-pre-wrap\">{results.risk_assessment}</div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ChatInterface.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'draftSaveTimeout'. Either include it or remove the dependency array.","line":105,"column":6,"nodeType":"ArrayExpression","endLine":105,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [input, conversationId, draftSaveTimeout]","fix":{"range":[4532,4555],"text":"[input, conversationId, draftSaveTimeout]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadConversationFiles'. Either include it or remove the dependency array.","line":166,"column":6,"nodeType":"ArrayExpression","endLine":166,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [conversationId, conversations, loadConversationFiles]","fix":{"range":[6464,6495],"text":"[conversationId, conversations, loadConversationFiles]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":252,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8980,8983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8980,8983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":325,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11809,11812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11809,11812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":491,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":491,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16661,16664],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16661,16664],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Send, FileText, Sparkles, Clock, Paperclip, StopCircle, Download, Copy, Trash2, BookTemplate, Save, Table, Shield } from \"lucide-react\";\nimport { toast as showToast } from \"sonner\";\nimport { cn } from \"@/lib/utils\";\nimport { useMessages, Message as DBMessage } from \"@/hooks/useMessages\";\nimport { useConversations } from \"@/hooks/useConversations\";\nimport { FileDropZone } from \"./FileDropZone\";\nimport { FilePreview } from \"./FilePreview\";\nimport { MessageActions, StreamingMessage } from \"./MessageActions\";\nimport { ExamplePrompts } from \"./ExamplePrompts\";\nimport { NoteTemplates } from \"./NoteTemplates\";\nimport { AdvancedAnalysis } from \"./AdvancedAnalysis\";\nimport { StructuredNoteForm } from \"./StructuredNoteForm\";\nimport { VoiceInput } from \"./VoiceInput\";\nimport { SpeakButton } from \"./SpeakButton\";\nimport { EditMessageDialog } from \"./EditMessageDialog\";\nimport {\n  extractTextFromFile,\n  uploadFileToStorage,\n  saveFileMetadata,\n  getConversationFiles,\n  deleteFile,\n} from \"@/lib/fileUpload\";\nimport { analyzeNotesStreaming } from \"@/lib/openai\";\nimport { exportConversationToPDF, exportConversationToText, copyConversationToClipboard } from \"@/lib/exportUtils\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Part2Badge } from \"@/components/Part2Badge\";\nimport { ClientSelector } from \"@/components/clients/ClientSelector\";\n\ninterface UploadedFile {\n  id: string;\n  file_name: string;\n  file_type: string;\n  file_url: string;\n  processed_content: string;\n}\n\ninterface ChatInterfaceProps {\n  conversationId: string | null;\n  onConversationCreated?: (id: string) => void;\n}\n\nconst ChatInterface = ({ conversationId, onConversationCreated }: ChatInterfaceProps) => {\n  const [input, setInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [showFileUpload, setShowFileUpload] = useState(false);\n  const [abortController, setAbortController] = useState<AbortController | null>(null);\n  const [lastUserMessage, setLastUserMessage] = useState<string>(\"\");\n  const [lastAction, setLastAction] = useState<string>(\"session_summary\");\n  const [clearDialogOpen, setClearDialogOpen] = useState(false);\n  const [conversationTitle, setConversationTitle] = useState<string>(\"\");\n  const [draftSaveTimeout, setDraftSaveTimeout] = useState<NodeJS.Timeout | null>(null);\n  const [isPart2Protected, setIsPart2Protected] = useState(false);\n  const [showPart2Warning, setShowPart2Warning] = useState(false);\n  const [selectedClientId, setSelectedClientId] = useState<string>(\"\");\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [editingMessage, setEditingMessage] = useState<DBMessage | null>(null);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  \n  const { messages: dbMessages, addMessage } = useMessages(conversationId);\n  const { createConversation, conversations } = useConversations();\n\n  const [displayMessages, setDisplayMessages] = useState<Array<DBMessage & { isStreaming?: boolean }>>([]);\n\n  // Auto-save draft to sessionStorage (cleared when tab closes)\n  // SECURITY: Using sessionStorage instead of localStorage to prevent PHI persistence\n  useEffect(() => {\n    if (input && !conversationId) {\n      if (draftSaveTimeout) clearTimeout(draftSaveTimeout);\n      const timeout = setTimeout(() => {\n        sessionStorage.setItem(\"clinicalai_draft\", input);\n      }, 1000);\n      setDraftSaveTimeout(timeout);\n    }\n    return () => {\n      if (draftSaveTimeout) clearTimeout(draftSaveTimeout);\n    };\n  }, [input, conversationId]);\n\n  // Load draft on mount and cleanup on unmount\n  // SECURITY: Using sessionStorage to prevent PHI from persisting across sessions\n  useEffect(() => {\n    if (!conversationId) {\n      const draft = sessionStorage.getItem(\"clinicalai_draft\");\n      if (draft) {\n        setInput(draft);\n      }\n    }\n\n    // Cleanup: Clear draft when component unmounts or user signs out\n    return () => {\n      supabase.auth.getSession().then(({ data: { session } }) => {\n        if (!session) {\n          sessionStorage.removeItem(\"clinicalai_draft\");\n        }\n      });\n    };\n  }, [conversationId]);\n\n  useEffect(() => {\n    if (dbMessages.length === 0 && !conversationId) {\n      // Show welcome message for new conversations\n      setDisplayMessages([\n        {\n          id: \"welcome\",\n          role: \"assistant\",\n          content:\n            \"Hello! I'm your ClinicalAI Assistant. I can help you:\\n\\n• Generate comprehensive SOAP notes from your session observations\\n• Create detailed session summaries\\n• Extract key clinical points\\n• Develop progress reports\\n\\nSimply paste your session notes below, upload a file, or use one of the quick actions to get started.\",\n          created_at: new Date().toISOString(),\n        },\n      ]);\n    } else {\n      setDisplayMessages(dbMessages);\n    }\n  }, [dbMessages, conversationId]);\n\n  const scrollToBottom = () => {\n    requestAnimationFrame(() => {\n      messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [displayMessages]);\n\n  useEffect(() => {\n    if (conversationId) {\n      loadConversationFiles();\n      // Load conversation title\n      const conversation = conversations.find((c) => c.id === conversationId);\n      if (conversation) {\n        setConversationTitle(conversation.title);\n      }\n    } else {\n      setUploadedFiles([]);\n      setConversationTitle(\"\");\n    }\n  }, [conversationId, conversations]);\n\n  const loadConversationFiles = async () => {\n    if (!conversationId) return;\n    const files = await getConversationFiles(conversationId);\n    setUploadedFiles(files);\n  };\n\n  const generateTitle = (content: string): string => {\n    const firstLine = content.split(\"\\n\")[0];\n    return firstLine.length > 50 ? firstLine.substring(0, 50) + \"...\" : firstLine;\n  };\n\n  const handleSubmit = async (customPrompt?: string, customAction?: string) => {\n    const messageContent = customPrompt || input.trim();\n    if (!messageContent) return;\n\n    // Store for regeneration\n    setLastUserMessage(messageContent);\n    setLastAction(customAction || \"session_summary\");\n\n    let currentConversationId = conversationId;\n\n    // Create new conversation if none exists\n    if (!currentConversationId) {\n      const title = generateTitle(messageContent);\n      currentConversationId = await createConversation(\n        title, \n        isPart2Protected,\n        selectedClientId\n      );\n      \n      if (!currentConversationId) {\n        showToast.error(\"Failed to create conversation\");\n        return;\n      }\n      \n      onConversationCreated?.(currentConversationId);\n      \n      // Show Part 2 warning if flagged\n      if (isPart2Protected) {\n        showToast.info(\"Session marked as 42 CFR Part 2 protected\", {\n          description: \"All access to this conversation will be audited\"\n        });\n      }\n    }\n\n    // Save user message to database\n    const userMsg = await addMessage(\"user\", messageContent);\n    if (!userMsg) return;\n\n    setInput(\"\");\n    setLoading(true);\n\n    // Create abort controller for stopping generation\n    const controller = new AbortController();\n    setAbortController(controller);\n\n    // Determine action type\n    const action = customAction || \"session_summary\";\n\n    // Start streaming AI response\n    let aiResponse = \"\";\n    const streamingMessageId = `streaming-${Date.now()}`;\n    \n    // Add a temporary streaming message with progress indicator\n    setDisplayMessages((prev) => [\n      ...prev,\n      {\n        id: streamingMessageId,\n        role: \"assistant\",\n        content: \"\",\n        created_at: new Date().toISOString(),\n        isStreaming: true,\n      },\n    ]);\n\n    // Show streaming toast\n    showToast.loading(\"Generating response...\", {\n      id: \"streaming-toast\",\n      description: \"AI is analyzing your notes\"\n    });\n\n    try {\n      await analyzeNotesStreaming({\n        notes: messageContent,\n        action: action as any,\n        onChunk: (chunk) => {\n          aiResponse += chunk;\n          // Update the streaming message in real-time\n          setDisplayMessages((prev) =>\n            prev.map((msg) =>\n              msg.id === streamingMessageId\n                ? { ...msg, content: aiResponse }\n                : msg\n            )\n          );\n        },\n        onComplete: async () => {\n          // Dismiss streaming toast\n          showToast.dismiss(\"streaming-toast\");\n          \n          // Save complete AI response to database\n          await addMessage(\"assistant\", aiResponse);\n          \n          // Remove the temporary streaming message (it will be replaced by the DB message)\n          setDisplayMessages((prev) =>\n            prev.filter((msg) => msg.id !== streamingMessageId)\n          );\n          \n          setLoading(false);\n          setAbortController(null);\n          showToast.success(\"Analysis complete!\", {\n            description: `Generated ${aiResponse.length} characters`\n          });\n        },\n        onError: (error) => {\n          console.error(\"Streaming error:\", error);\n          \n          // Dismiss streaming toast\n          showToast.dismiss(\"streaming-toast\");\n          \n          // Check if it was user-initiated abort\n          if (controller.signal.aborted) {\n            showToast.info(\"Response generation stopped by user\");\n          } else {\n            // Provide user-friendly error messages\n            let errorMessage = \"Failed to generate response. Please try again.\";\n            \n            if (error.includes(\"rate limit\") || error.includes(\"429\")) {\n              errorMessage = \"Too many requests. Please wait a moment and try again.\";\n            } else if (error.includes(\"network\") || error.includes(\"fetch\")) {\n              errorMessage = \"Network connection issue. Please check your internet and try again.\";\n            } else if (error.includes(\"timeout\")) {\n              errorMessage = \"Request timed out. Please try again with a shorter input.\";\n            } else if (error.includes(\"402\") || error.includes(\"payment\")) {\n              errorMessage = \"AI service temporarily unavailable. Please contact support.\";\n            }\n            \n            showToast.error(errorMessage, {\n              description: \"If this persists, please contact support.\",\n              duration: 5000\n            });\n          }\n          \n          // Remove the temporary streaming message\n          setDisplayMessages((prev) =>\n            prev.filter((msg) => msg.id !== streamingMessageId)\n          );\n          \n          setLoading(false);\n          setAbortController(null);\n        },\n      });\n\n      // Handle abort signal\n      controller.signal.addEventListener(\"abort\", () => {\n        // The onError callback will handle cleanup\n      });\n    } catch (error: any) {\n      console.error(\"Error during analysis:\", error);\n      showToast.error(\"Failed to analyze notes\");\n      \n      // Remove the temporary streaming message\n      setDisplayMessages((prev) =>\n        prev.filter((msg) => msg.id !== streamingMessageId)\n      );\n      \n      setLoading(false);\n      setAbortController(null);\n    }\n  };\n\n  const handleStopGeneration = () => {\n    if (abortController) {\n      abortController.abort();\n      setAbortController(null);\n      setLoading(false);\n    }\n  };\n\n  const handleRegenerate = () => {\n    if (lastUserMessage) {\n      handleSubmit(lastUserMessage, lastAction);\n    }\n  };\n\n  const handleEditMessage = (message: DBMessage) => {\n    setEditingMessage(message);\n    setEditDialogOpen(true);\n  };\n\n  const handleApplyEdit = async (editInstruction: string) => {\n    if (!editingMessage || !conversationId) return;\n\n    setLoading(true);\n    \n    let editedContent = \"\";\n    const streamingMessageId = `editing-${Date.now()}`;\n    \n    // Add a temporary streaming message\n    setDisplayMessages((prev) => [\n      ...prev,\n      {\n        id: streamingMessageId,\n        role: \"assistant\",\n        content: \"\",\n        created_at: new Date().toISOString(),\n        isStreaming: true,\n      },\n    ]);\n\n    try {\n      await analyzeNotesStreaming({\n        notes: \"\", // Not used for edit action\n        action: \"edit_content\",\n        originalContent: editingMessage.content,\n        editInstruction: editInstruction,\n        onChunk: (chunk) => {\n          editedContent += chunk;\n          setDisplayMessages((prev) =>\n            prev.map((msg) =>\n              msg.id === streamingMessageId\n                ? { ...msg, content: editedContent }\n                : msg\n            )\n          );\n        },\n        onComplete: async () => {\n          // Save the edited content as a new assistant message\n          await addMessage(\"assistant\", editedContent);\n          \n          // Remove the temporary streaming message\n          setDisplayMessages((prev) =>\n            prev.filter((msg) => msg.id !== streamingMessageId)\n          );\n          \n          setLoading(false);\n          setEditDialogOpen(false);\n          setEditingMessage(null);\n          showToast.success(\"Edit applied successfully!\");\n        },\n        onError: (error) => {\n          console.error(\"Edit error:\", error);\n          showToast.error(error);\n          \n          setDisplayMessages((prev) =>\n            prev.filter((msg) => msg.id !== streamingMessageId)\n          );\n          \n          setLoading(false);\n        },\n      });\n    } catch (error) {\n      console.error(\"Error applying edit:\", error);\n      showToast.error(\"Failed to apply edit\");\n      setLoading(false);\n    }\n  };\n\n  const handleQuickAction = (action: string) => {\n    const actionMap: Record<string, string> = {\n      soap: \"soap_note\",\n      summary: \"session_summary\",\n      keypoints: \"key_points\",\n      progress: \"progress_report\",\n    };\n\n    const prompts: Record<string, string> = {\n      soap: \"Please generate a detailed SOAP note based on the session information provided.\",\n      summary: \"Create a comprehensive session summary highlighting key therapeutic moments and client progress.\",\n      keypoints: \"Extract and organize the most clinically significant points from this session.\",\n      progress: \"Generate a detailed progress report documenting therapeutic gains and areas for continued focus.\",\n    };\n\n    handleSubmit(prompts[action], actionMap[action]);\n  };\n\n  const handleFileSelect = async (file: File) => {\n    let currentConversationId = conversationId;\n\n    // Create conversation if none exists\n    if (!currentConversationId) {\n      const title = `Document Analysis: ${file.name}`;\n      currentConversationId = await createConversation(\n        title, \n        isPart2Protected,\n        selectedClientId\n      );\n      \n      if (!currentConversationId) {\n        showToast.error(\"Failed to create conversation\");\n        return;\n      }\n      \n      onConversationCreated?.(currentConversationId);\n    }\n\n    try {\n      showToast.info(\"Processing file...\");\n      \n      // Extract text from file\n      const extractedText = await extractTextFromFile(file);\n      \n      // Upload file to storage\n      const uploadResult = await uploadFileToStorage(file, currentConversationId);\n      if (!uploadResult) return;\n\n      // Determine file type\n      const fileType = file.type === \"application/pdf\" ? \"pdf\" : \"text\";\n\n      // Save file metadata\n      const fileId = await saveFileMetadata(\n        currentConversationId,\n        file.name,\n        fileType,\n        uploadResult.url,\n        extractedText\n      );\n\n      if (fileId) {\n        showToast.success(\"File uploaded successfully!\");\n        await loadConversationFiles();\n        setShowFileUpload(false);\n      }\n    } catch (error: any) {\n      console.error(\"Error processing file:\", error);\n      showToast.error(error.message || \"Failed to process file\");\n    }\n  };\n\n  const handleDeleteFile = async (fileId: string) => {\n    const file = uploadedFiles.find((f) => f.id === fileId);\n    if (!file) return;\n\n    const filePath = file.file_url.split(\"/clinical-documents/\")[1];\n    const success = await deleteFile(fileId, filePath);\n    if (success) {\n      await loadConversationFiles();\n    }\n  };\n\n  const handleAnalyzeFile = (content: string, fileName: string) => {\n    const prompt = `Please analyze the following document content from \"${fileName}\":\\n\\n${content.substring(0, 3000)}${content.length > 3000 ? \"...\" : \"\"}`;\n    handleSubmit(prompt, \"session_summary\");\n  };\n\n  const handleClearConversation = () => {\n    setClearDialogOpen(true);\n  };\n\n  const handleConfirmClear = () => {\n    if (onConversationCreated) {\n      onConversationCreated(\"\");\n    }\n    setClearDialogOpen(false);\n    showToast.success(\"Started new conversation\");\n  };\n\n  const handleExportPDF = async () => {\n    if (!conversationId) {\n      showToast.error(\"No conversation to export\");\n      return;\n    }\n    await exportConversationToPDF(conversationId, conversationTitle || \"Conversation\");\n  };\n\n  const handleExportText = async () => {\n    if (!conversationId) {\n      showToast.error(\"No conversation to export\");\n      return;\n    }\n    await exportConversationToText(conversationId, conversationTitle || \"Conversation\");\n  };\n\n  const handleCopyToClipboard = async () => {\n    if (!conversationId) {\n      showToast.error(\"No conversation to copy\");\n      return;\n    }\n    await copyConversationToClipboard(conversationId, conversationTitle || \"Conversation\");\n  };\n\n  const handleSelectExample = (example: string) => {\n    setInput(example);\n    sessionStorage.removeItem(\"clinicalai_draft\");\n  };\n\n  const handleSelectTemplate = (template: string) => {\n    setInput(template);\n    sessionStorage.removeItem(\"clinicalai_draft\");\n  };\n\n  const wordCount = input.trim().split(/\\s+/).filter(Boolean).length;\n  const charCount = input.length;\n  const estimatedTime = wordCount > 0 ? Math.max(5, Math.ceil(wordCount / 50)) : 0;\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Conversation Actions */}\n      {conversationId && displayMessages.length > 1 && (\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center gap-3\">\n            <h3 className=\"text-lg font-medium text-foreground\">{conversationTitle}</h3>\n            {conversations.find(c => c.id === conversationId)?.is_part2_protected && (\n              <Part2Badge consentStatus={conversations.find(c => c.id === conversationId)?.part2_consent_status} />\n            )}\n          </div>\n          <div className=\"flex gap-2\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem onClick={handleExportPDF}>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Download as PDF\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={handleExportText}>\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Download as Text\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={handleCopyToClipboard}>\n                  <Copy className=\"w-4 h-4 mr-2\" />\n                  Copy to Clipboard\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleClearConversation}\n              className=\"hover:bg-destructive/10 hover:text-destructive\"\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Clear Conversation\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Messages Display - Only show if there are messages */}\n      {displayMessages.length > 0 && (\n        <Card className=\"h-[500px] overflow-y-auto p-6 shadow-md border-border/50 bg-card/80 backdrop-blur-sm\">\n          <div className=\"space-y-4\">\n            {displayMessages.map((message) => (\n              <div\n                key={message.id}\n                className={cn(\n                  \"flex w-full\",\n                  message.role === \"user\" ? \"justify-end\" : \"justify-start\"\n                )}\n              >\n                <div\n                  className={cn(\n                    \"max-w-[85%] rounded-lg px-4 py-3 shadow-sm transition-all animate-fade-in\",\n                    message.role === \"user\"\n                      ? \"bg-primary/10 text-foreground border border-primary/20\"\n                      : \"bg-card text-foreground border border-border\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    {message.role === \"assistant\" && (\n                      <Sparkles className=\"w-4 h-4 text-accent flex-shrink-0\" />\n                    )}\n                    <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                      <Clock className=\"w-3 h-3\" />\n                      {formatTime(message.created_at)}\n                    </span>\n                  </div>\n\n                  {message.role === \"assistant\" ? (\n                    <>\n                      <StreamingMessage\n                        content={message.content}\n                        isStreaming={message.isStreaming || false}\n                      />\n                      <MessageActions\n                        content={message.content}\n                        isStreaming={message.isStreaming}\n                        onRegenerate={message.isStreaming ? undefined : handleRegenerate}\n                        onEdit={() => handleEditMessage(message)}\n                        showEdit={!message.isStreaming}\n                      />\n                    </>\n                  ) : (\n                    <p className=\"text-sm leading-relaxed whitespace-pre-wrap\">\n                      {message.content}\n                    </p>\n                  )}\n                </div>\n              </div>\n            ))}\n\n            <div ref={messagesEndRef} />\n          </div>\n        </Card>\n      )}\n\n      {/* Disclaimer */}\n      {displayMessages.some((m) => m.role === \"assistant\") && (\n        <Card className=\"p-3 bg-amber-500/5 border-amber-500/20\">\n          <p className=\"text-xs text-muted-foreground text-center\">\n            ⚠️ <strong>Professional Review Required:</strong> All AI-generated clinical documentation\n            must be reviewed and verified by a qualified healthcare professional before use.\n          </p>\n        </Card>\n      )}\n\n      {/* Quick Actions */}\n      <Card className=\"p-4 shadow-sm border-border/50 bg-card/80 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between gap-2 mb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Sparkles className=\"w-4 h-4 text-accent\" />\n            <span className=\"text-sm font-medium text-foreground\">Quick Actions</span>\n          </div>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <NoteTemplates onSelectTemplate={handleSelectTemplate} />\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Access pre-formatted note templates</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleQuickAction(\"soap\")}\n                  disabled={loading}\n                  className=\"transition-all hover:bg-primary/10 hover:border-primary/30\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  SOAP Note\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Generate structured SOAP note</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleQuickAction(\"summary\")}\n                  disabled={loading}\n                  className=\"transition-all hover:bg-primary/10 hover:border-primary/30\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Session Summary\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Create comprehensive session summary</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleQuickAction(\"keypoints\")}\n                  disabled={loading}\n                  className=\"transition-all hover:bg-primary/10 hover:border-primary/30\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Key Points\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Extract key clinical insights</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleQuickAction(\"progress\")}\n                  disabled={loading}\n                  className=\"transition-all hover:bg-primary/10 hover:border-primary/30\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  Progress Report\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Generate detailed progress report</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      </Card>\n\n      {/* Uploaded Files */}\n      {uploadedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-medium text-foreground flex items-center gap-2\">\n            <Paperclip className=\"w-4 h-4\" />\n            Uploaded Documents ({uploadedFiles.length})\n          </p>\n          {uploadedFiles.map((file) => (\n            <FilePreview\n              key={file.id}\n              file={file}\n              onDelete={handleDeleteFile}\n              onAnalyze={handleAnalyzeFile}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* File Upload Zone */}\n      {showFileUpload && (\n        <FileDropZone onFileSelect={handleFileSelect} disabled={loading} />\n      )}\n\n      {/* Input Area with Tabs */}\n      <Tabs defaultValue=\"freeform\" className=\"w-full\" data-onboarding=\"tabs\">\n        <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n          <TabsTrigger value=\"freeform\" className=\"flex items-center gap-2\">\n            <FileText className=\"w-4 h-4\" />\n            Free-form Notes\n          </TabsTrigger>\n          <TabsTrigger value=\"structured\" className=\"flex items-center gap-2\">\n            <Table className=\"w-4 h-4\" />\n            Structured Form\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Free-form Note Tab */}\n        <TabsContent value=\"freeform\">\n          <Card className=\"p-4 shadow-md border-border/50 bg-card/80 backdrop-blur-sm\" onClick={() => inputRef.current?.focus()}>\n            <div className=\"space-y-3\">\n              {/* Example Prompts - Show when no conversation exists */}\n              {!conversationId && displayMessages.length <= 1 && (\n                <ExamplePrompts onSelectExample={handleSelectExample} disabled={loading} />\n              )}\n\n          <Textarea\n            ref={inputRef}\n            autoFocus\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Enter your session notes here...&#10;&#10;Include patient observations, session content, interventions used, and any notable behavioral or emotional changes...\"\n            className=\"min-h-[120px] resize-y transition-all focus:shadow-md\"\n            disabled={loading}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\" && e.ctrlKey) {\n                handleSubmit();\n              }\n            }}\n          />\n\n          {/* Character/Word Count and Estimated Time */}\n          {input && (\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n              <div className=\"flex items-center gap-4\">\n                <span>{charCount} characters</span>\n                <span>•</span>\n                <span>{wordCount} words</span>\n                {estimatedTime > 0 && (\n                  <>\n                    <span>•</span>\n                    <TooltipProvider>\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            ~{estimatedTime}s processing time\n                          </span>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>Estimated time based on content length</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>\n                  </>\n                )}\n              </div>\n              {!conversationId && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  <Save className=\"w-3 h-3 mr-1\" />\n                  Draft auto-saved\n                </Badge>\n              )}\n            </div>\n          )}\n\n          {/* Client Selection */}\n          {!conversationId && (\n            <ClientSelector\n              value={selectedClientId}\n              onChange={setSelectedClientId}\n            />\n          )}\n\n          {/* Part 2 Classification Checkbox */}\n          {!conversationId && (\n            <div className=\"flex items-center gap-3 p-3 rounded-lg border border-purple-500/20 bg-purple-500/5\">\n              <Checkbox \n                id=\"part2-protected\"\n                checked={isPart2Protected}\n                onCheckedChange={(checked) => setIsPart2Protected(checked as boolean)}\n                disabled={loading}\n              />\n              <Label \n                htmlFor=\"part2-protected\"\n                className=\"text-sm font-medium cursor-pointer flex items-center gap-2\"\n              >\n                <Shield className=\"w-4 h-4 text-purple-600\" />\n                This session involves substance use disorder treatment (42 CFR Part 2)\n              </Label>\n            </div>\n          )}\n\n          <div className=\"flex justify-between items-center gap-2\">\n            <div className=\"flex gap-2 flex-wrap\">\n              <div data-onboarding=\"voice-input\">\n                <VoiceInput\n                  onResult={(transcript) => {\n                    setInput(prev => prev ? `${prev} ${transcript}` : transcript);\n                  }}\n                  disabled={loading}\n                />\n              </div>\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowFileUpload(!showFileUpload)}\n                disabled={loading}\n                className=\"transition-all\"\n              >\n                <Paperclip className=\"w-4 h-4 mr-2\" />\n                {showFileUpload ? \"Hide Upload\" : \"Upload Document\"}\n              </Button>\n              \n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setInput(\"\")}\n                disabled={loading || !input}\n                className=\"transition-all\"\n              >\n                Clear\n              </Button>\n            </div>\n\n            <div className=\"flex gap-2 items-center\">\n              <div data-onboarding=\"speak-button\">\n                {input && (\n                  <SpeakButton text={input} disabled={loading} />\n                )}\n              </div>\n              \n              <Button\n                onClick={() => handleSubmit()}\n                disabled={loading || !input.trim()}\n                className=\"bg-primary hover:bg-primary/90 transition-all shadow-sm\"\n              >\n                {loading ? (\n                  <>\n                    <Sparkles className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Analyzing...\n                  </>\n                ) : (\n                  <>\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    Analyze Notes\n                  </>\n                )}\n              </Button>\n            </div>\n\n            {loading && (\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleStopGeneration}\n                className=\"ml-2\"\n                data-testid=\"stop-generation\"\n              >\n                <StopCircle className=\"w-4 h-4 mr-2\" />\n                Stop\n              </Button>\n            )}\n          </div>\n\n          <p className=\"text-xs text-muted-foreground text-center flex items-center justify-center gap-2\">\n            <kbd className=\"px-2 py-0.5 bg-secondary rounded text-xs\">Ctrl+Enter</kbd>\n            to submit • Upload PDF or text documents for analysis\n          </p>\n        </div>\n      </Card>\n\n      {/* Advanced Analysis Section - Only for freeform */}\n      {input.trim() && (\n        <div data-onboarding=\"advanced-analysis\">\n          <AdvancedAnalysis \n            noteContent={input} \n            conversationId={conversationId || \"temp\"} \n          />\n        </div>\n      )}\n        </TabsContent>\n\n        {/* Structured Form Tab */}\n        <TabsContent value=\"structured\" data-onboarding=\"structured-form\">\n          {conversationId ? (\n            <StructuredNoteForm conversationId={conversationId} />\n          ) : (\n            <Card className=\"p-8 text-center\">\n              <p className=\"text-muted-foreground\">\n                Please start a conversation first to use the structured note form.\n              </p>\n              <Button \n                onClick={() => handleSubmit(\"Started new session\", \"session_summary\")}\n                className=\"mt-4\"\n              >\n                Start New Session\n              </Button>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Message Dialog */}\n      <EditMessageDialog\n        open={editDialogOpen}\n        onOpenChange={setEditDialogOpen}\n        originalContent={editingMessage?.content || \"\"}\n        onEdit={handleApplyEdit}\n        isLoading={loading}\n      />\n\n      {/* Clear Conversation Dialog */}\n      <AlertDialog open={clearDialogOpen} onOpenChange={setClearDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Clear Conversation?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will start a new conversation. Your current conversation will be saved in the\n              history sidebar.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction onClick={handleConfirmClear}>\n              Start New Conversation\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ConversationSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3230,3233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3230,3233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3956,3959],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3956,3959],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from \"react\";\nimport { MessageSquare, Trash2, Search, Plus, Download, Calendar, Shield } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { cn } from \"@/lib/utils\";\nimport { useConversations } from \"@/hooks/useConversations\";\nimport { useMessages } from \"@/hooks/useMessages\";\nimport { exportConversationToPDF } from \"@/lib/exportUtils\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { Part2Badge } from \"@/components/Part2Badge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ConversationSidebarProps {\n  currentConversationId?: string | null;\n  onConversationSelect?: (conversationId: string) => void;\n  onNewConversation?: () => void;\n}\n\nexport const ConversationSidebar = ({\n  currentConversationId,\n  onConversationSelect,\n  onNewConversation,\n}: ConversationSidebarProps) => {\n  const { conversations, loading, deleteConversation, hasMore, loadMore } = useConversations();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [conversationToDelete, setConversationToDelete] = useState<string | null>(null);\n\n  // Group conversations by date\n  const groupedConversations = useMemo(() => {\n    const filtered = conversations.filter((conv) =>\n      conv.title.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n    const weekAgo = new Date(today);\n    weekAgo.setDate(weekAgo.getDate() - 7);\n\n    return {\n      today: filtered.filter((c) => new Date(c.updated_at) >= today),\n      yesterday: filtered.filter(\n        (c) => new Date(c.updated_at) >= yesterday && new Date(c.updated_at) < today\n      ),\n      thisWeek: filtered.filter(\n        (c) => new Date(c.updated_at) >= weekAgo && new Date(c.updated_at) < yesterday\n      ),\n      older: filtered.filter((c) => new Date(c.updated_at) < weekAgo),\n    };\n  }, [conversations, searchQuery]);\n\n  const handleDeleteClick = (e: React.MouseEvent, conversationId: string) => {\n    e.stopPropagation();\n    setConversationToDelete(conversationId);\n    setDeleteDialogOpen(true);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (conversationToDelete) {\n      await deleteConversation(conversationToDelete);\n      if (currentConversationId === conversationToDelete && onConversationSelect) {\n        onConversationSelect(\"\");\n      }\n    }\n    setDeleteDialogOpen(false);\n    setConversationToDelete(null);\n  };\n\n  const handleExportClick = async (e: React.MouseEvent, conversationId: string, title: string) => {\n    e.stopPropagation();\n    await exportConversationToPDF(conversationId, title);\n  };\n\n  const ConversationGroup = ({ title, conversations }: { title: string; conversations: any[] }) => {\n    if (conversations.length === 0) return null;\n\n    return (\n      <div className=\"mb-4\">\n        <div className=\"flex items-center gap-2 mb-2 px-2\">\n          <Calendar className=\"w-3 h-3 text-muted-foreground\" />\n          <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n            {title}\n          </h4>\n          <span className=\"text-xs text-muted-foreground\">({conversations.length})</span>\n        </div>\n        <div className=\"space-y-1\">\n          {conversations.map((conv) => (\n            <ConversationItem key={conv.id} conversation={conv} />\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  const ConversationItem = ({ conversation }: { conversation: any }) => {\n    const { messages } = useMessages(conversation.id);\n    const lastMessage = messages[messages.length - 1];\n\n    return (\n      <div\n        className={cn(\n          \"group relative flex flex-col gap-1 p-3 rounded-lg cursor-pointer transition-all\",\n          currentConversationId === conversation.id\n            ? \"bg-primary/10 border border-primary/20\"\n            : \"hover:bg-secondary/50 border border-transparent\"\n        )}\n        onClick={() => onConversationSelect?.(conversation.id)}\n      >\n        <div className=\"flex items-start justify-between gap-2\">\n          <div className=\"flex items-start gap-2 flex-1 min-w-0\">\n            <MessageSquare className=\"w-4 h-4 flex-shrink-0 mt-0.5 text-primary\" />\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2\">\n                <p className=\"text-sm font-medium text-foreground truncate\">\n                  {conversation.title}\n                </p>\n                {conversation.is_part2_protected && (\n                  <Part2Badge consentStatus={conversation.part2_consent_status} size=\"sm\" />\n                )}\n              </div>\n              {lastMessage && (\n                <p className=\"text-xs text-muted-foreground truncate mt-0.5\">\n                  {lastMessage.content.substring(0, 50)}...\n                </p>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-7 w-7 p-0 hover:bg-primary/10\"\n              onClick={(e) => handleExportClick(e, conversation.id, conversation.title)}\n              title=\"Export to PDF\"\n            >\n              <Download className=\"w-3.5 h-3.5\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-7 w-7 p-0 hover:bg-destructive/10 hover:text-destructive\"\n              onClick={(e) => handleDeleteClick(e, conversation.id)}\n              title=\"Delete conversation\"\n            >\n              <Trash2 className=\"w-3.5 h-3.5\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-2 text-xs text-muted-foreground ml-6\">\n          <span>{formatDistanceToNow(new Date(conversation.updated_at), { addSuffix: true })}</span>\n          {messages.length > 0 && (\n            <>\n              <span>•</span>\n              <span>{messages.length} messages</span>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"flex flex-col h-full p-4\">\n        {/* New Conversation Button */}\n        <Button\n          onClick={onNewConversation}\n          className=\"w-full mb-4 bg-primary hover:bg-primary/90 shadow-sm\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Conversation\n        </Button>\n\n        {/* Search */}\n        <div className=\"relative mb-4\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-9 bg-background\"\n          />\n        </div>\n\n        <Separator className=\"mb-4\" />\n\n        {/* Conversations List */}\n        <ScrollArea className=\"flex-1\">\n          {loading ? (\n            <div className=\"text-sm text-muted-foreground text-center py-8\">Loading...</div>\n          ) : conversations.length === 0 ? (\n            <div className=\"text-sm text-muted-foreground text-center py-8\">\n              <MessageSquare className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n              <p>No conversations yet</p>\n              <p className=\"text-xs mt-1\">Start a new conversation to get started</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-2\">\n                <ConversationGroup title=\"Today\" conversations={groupedConversations.today} />\n                <ConversationGroup title=\"Yesterday\" conversations={groupedConversations.yesterday} />\n                <ConversationGroup title=\"This Week\" conversations={groupedConversations.thisWeek} />\n                <ConversationGroup title=\"Older\" conversations={groupedConversations.older} />\n              </div>\n              \n              {/* Load More Button */}\n              {hasMore && (\n                <div className=\"mt-4 px-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={loadMore}\n                    className=\"w-full\"\n                    disabled={loading}\n                  >\n                    Load more conversations...\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </ScrollArea>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Conversation?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the conversation and all\n              associated messages and files.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleConfirmDelete}\n              className=\"bg-destructive hover:bg-destructive/90\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\EditMessageDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ExamplePrompts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\FHIRExport.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[580,583],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[580,583],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { generateFHIRBundle, downloadFHIRBundle } from '@/lib/fhir';\nimport { FileDown } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface FHIRExportProps {\n  note: any;\n  client: any;\n}\n\nconst FHIRExport: React.FC<FHIRExportProps> = ({ note, client }) => {\n  const [format, setFormat] = useState<'json' | 'xml'>('json');\n  const [practitionerName, setPractitionerName] = useState('');\n  const [organizationName, setOrganizationName] = useState('');\n\n  const handleExport = () => {\n    if (!note || !client) {\n      toast.error('Note and client data are required for export');\n      return;\n    }\n\n    try {\n      const bundle = generateFHIRBundle({\n        client,\n        note,\n        practitionerName: practitionerName || 'Unknown Provider',\n        organizationName: organizationName || 'Mental Health Clinic'\n      });\n\n      const filename = `fhir-note-${client.last_name}-${new Date(note.session_date).toISOString().split('T')[0]}.${format}`;\n      downloadFHIRBundle(bundle, format, filename);\n\n      toast.success(`FHIR bundle exported as ${format.toUpperCase()}`);\n    } catch (error) {\n      console.error('Export error:', error);\n      toast.error('Failed to export FHIR bundle');\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileDown className=\"h-5 w-5\" />\n          Export to EHR (FHIR)\n        </CardTitle>\n        <CardDescription>\n          Export this note as a FHIR-compliant document for integration with electronic health records\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"practitioner\">Practitioner Name</Label>\n          <Input\n            id=\"practitioner\"\n            placeholder=\"Dr. Jane Smith\"\n            value={practitionerName}\n            onChange={(e) => setPractitionerName(e.target.value)}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"organization\">Organization Name</Label>\n          <Input\n            id=\"organization\"\n            placeholder=\"Mental Health Clinic\"\n            value={organizationName}\n            onChange={(e) => setOrganizationName(e.target.value)}\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"format\">Export Format</Label>\n          <Select value={format} onValueChange={(value: 'json' | 'xml') => setFormat(value)}>\n            <SelectTrigger id=\"format\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"json\">JSON (recommended)</SelectItem>\n              <SelectItem value=\"xml\">XML</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <Button onClick={handleExport} className=\"w-full gap-2\">\n          <FileDown className=\"h-4 w-4\" />\n          Export FHIR Bundle\n        </Button>\n\n        <div className=\"text-sm text-muted-foreground space-y-1\">\n          <p className=\"font-semibold\">Next steps:</p>\n          <ul className=\"list-disc list-inside space-y-1 ml-2\">\n            <li>Save the exported file to your computer</li>\n            <li>Open your EHR system</li>\n            <li>Navigate to the import/upload section</li>\n            <li>Select the downloaded FHIR file</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default FHIRExport;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\FileDropZone.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\FilePreview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\HelpDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\LoadingSkeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\MessageActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\NoteTemplates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\OnboardingTooltip.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'nextStep', 'previousStep', 'skipOnboarding', and 'updateTooltipPosition'. Either include them or remove the dependency array.","line":123,"column":6,"nodeType":"ArrayExpression","endLine":123,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [currentStep, isActive, currentStepData, skipOnboarding, nextStep, previousStep, updateTooltipPosition]","fix":{"range":[4027,4067],"text":"[currentStep, isActive, currentStepData, skipOnboarding, nextStep, previousStep, updateTooltipPosition]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useOnboarding } from \"@/hooks/useOnboarding\";\nimport { \n  ArrowRight, \n  ArrowLeft, \n  X, \n  Sparkles,\n  Mic,\n  Volume2,\n  FileText,\n  Table,\n  Brain,\n  HelpCircle\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TooltipStep {\n  target: string;\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  position: \"top\" | \"bottom\" | \"left\" | \"right\";\n}\n\nconst onboardingSteps: TooltipStep[] = [\n  {\n    target: \"[data-onboarding='voice-input']\",\n    title: \"Voice Input - Dictate Your Notes\",\n    description: \"Click the microphone to start dictating your clinical notes hands-free. Your speech will be transcribed in real-time.\",\n    icon: <Mic className=\"h-5 w-5\" />,\n    position: \"bottom\",\n  },\n  {\n    target: \"[data-onboarding='speak-button']\",\n    title: \"Text-to-Speech - Listen to Your Notes\",\n    description: \"Click the speaker icon to have your notes read aloud. Great for reviewing documentation hands-free.\",\n    icon: <Volume2 className=\"h-5 w-5\" />,\n    position: \"bottom\",\n  },\n  {\n    target: \"[data-onboarding='tabs']\",\n    title: \"Documentation Modes\",\n    description: \"Switch between Free-form notes (AI-assisted) and Structured forms (standardized templates) based on your needs.\",\n    icon: <FileText className=\"h-5 w-5\" />,\n    position: \"top\",\n  },\n  {\n    target: \"[data-onboarding='quick-actions']\",\n    title: \"Quick Actions\",\n    description: \"Use these buttons to instantly format your notes as SOAP notes, summaries, key points, or progress reports.\",\n    icon: <Sparkles className=\"h-5 w-5\" />,\n    position: \"top\",\n  },\n  {\n    target: \"[data-onboarding='advanced-analysis']\",\n    title: \"Advanced AI Analysis\",\n    description: \"Extract medical entities, generate clinical summaries, and perform risk assessments with one click.\",\n    icon: <Brain className=\"h-5 w-5\" />,\n    position: \"top\",\n  },\n  {\n    target: \"[data-onboarding='structured-form']\",\n    title: \"Structured Clinical Forms\",\n    description: \"Use standardized forms with auto-save for comprehensive session documentation. Perfect for detailed record-keeping.\",\n    icon: <Table className=\"h-5 w-5\" />,\n    position: \"top\",\n  },\n  {\n    target: \"[data-onboarding='help-button']\",\n    title: \"Need Help?\",\n    description: \"Click here anytime for comprehensive guides, troubleshooting tips, and feature documentation.\",\n    icon: <HelpCircle className=\"h-5 w-5\" />,\n    position: \"bottom\",\n  },\n];\n\nexport const OnboardingTooltip = () => {\n  const { currentStep, isActive, nextStep, previousStep, skipOnboarding, completeOnboarding } = useOnboarding();\n  const targetRef = useRef<HTMLElement | null>(null);\n  const tooltipRef = useRef<HTMLDivElement>(null);\n\n  const currentStepData = onboardingSteps[currentStep];\n  const isLastStep = currentStep === onboardingSteps.length - 1;\n\n  useEffect(() => {\n    if (isActive && currentStepData) {\n      const handleKey = (e: KeyboardEvent) => {\n        if (e.key === 'Escape') {\n          skipOnboarding();\n        } else if (e.key === 'ArrowRight') {\n          nextStep();\n        } else if (e.key === 'ArrowLeft') {\n          previousStep();\n        }\n      };\n\n      window.addEventListener('keydown', handleKey);\n\n      const target = document.querySelector(currentStepData.target) as HTMLElement;\n      targetRef.current = target;\n\n      if (target) {\n        // Scroll target into view\n        target.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n        \n        // Add highlight effect\n        target.classList.add(\"onboarding-highlight\");\n        \n        // Position tooltip\n        updateTooltipPosition();\n      }\n\n      return () => {\n        window.removeEventListener('keydown', handleKey);\n        if (targetRef.current) {\n          targetRef.current.classList.remove(\"onboarding-highlight\");\n        }\n      };\n    }\n  }, [currentStep, isActive, currentStepData]);\n\n  const updateTooltipPosition = () => {\n    if (!targetRef.current || !tooltipRef.current) return;\n\n    const targetRect = targetRef.current.getBoundingClientRect();\n    const tooltip = tooltipRef.current;\n    const { position } = currentStepData;\n\n    let top = 0;\n    let left = 0;\n\n    switch (position) {\n      case \"top\":\n        top = targetRect.top - tooltip.offsetHeight - 16;\n        left = targetRect.left + (targetRect.width / 2) - (tooltip.offsetWidth / 2);\n        break;\n      case \"bottom\":\n        top = targetRect.bottom + 16;\n        left = targetRect.left + (targetRect.width / 2) - (tooltip.offsetWidth / 2);\n        break;\n      case \"left\":\n        top = targetRect.top + (targetRect.height / 2) - (tooltip.offsetHeight / 2);\n        left = targetRect.left - tooltip.offsetWidth - 16;\n        break;\n      case \"right\":\n        top = targetRect.top + (targetRect.height / 2) - (tooltip.offsetHeight / 2);\n        left = targetRect.right + 16;\n        break;\n    }\n\n    tooltip.style.top = `${top}px`;\n    tooltip.style.left = `${left}px`;\n  };\n\n  if (!isActive) return null;\n\n  return (\n    <>\n      {/* Overlay */}\n      <div \n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-[100] animate-fade-in\"\n        onClick={skipOnboarding}\n      />\n\n      {/* Tooltip */}\n      <div\n        ref={tooltipRef}\n        className=\"fixed z-[101] animate-scale-in\"\n        style={{ maxWidth: \"400px\" }}\n      >\n        <Card className=\"shadow-2xl border-primary/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"bg-primary/10 p-2 rounded-lg\">\n                  {currentStepData.icon}\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg leading-tight\">\n                    {currentStepData.title}\n                  </h3>\n                  <Badge variant=\"secondary\" className=\"mt-1\">\n                    Step {currentStep + 1} of {onboardingSteps.length}\n                  </Badge>\n                </div>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={skipOnboarding}\n                className=\"h-8 w-8 -mt-2 -mr-2\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <p className=\"text-sm text-muted-foreground mb-6\">\n              {currentStepData.description}\n            </p>\n\n            <div className=\"flex items-center justify-between\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={previousStep}\n                disabled={currentStep === 0}\n                className=\"gap-2\"\n              >\n                <ArrowLeft className=\"h-4 w-4\" />\n                Back\n              </Button>\n\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={skipOnboarding}\n                >\n                  Skip Tour\n                </Button>\n                \n                {isLastStep ? (\n                  <Button\n                    onClick={completeOnboarding}\n                    className=\"gap-2\"\n                  >\n                    Get Started\n                    <Sparkles className=\"h-4 w-4\" />\n                  </Button>\n                ) : (\n                  <Button\n                    onClick={nextStep}\n                    className=\"gap-2\"\n                  >\n                    Next\n                    <ArrowRight className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Arrow pointer */}\n        <div\n          className={cn(\n            \"absolute w-0 h-0 border-8\",\n            currentStepData.position === \"top\" && \"bottom-[-16px] left-1/2 -translate-x-1/2 border-l-transparent border-r-transparent border-b-transparent border-t-card\",\n            currentStepData.position === \"bottom\" && \"top-[-16px] left-1/2 -translate-x-1/2 border-l-transparent border-r-transparent border-t-transparent border-b-card\",\n            currentStepData.position === \"left\" && \"right-[-16px] top-1/2 -translate-y-1/2 border-t-transparent border-b-transparent border-r-transparent border-l-card\",\n            currentStepData.position === \"right\" && \"left-[-16px] top-1/2 -translate-y-1/2 border-t-transparent border-b-transparent border-l-transparent border-r-card\"\n          )}\n        />\n      </div>\n\n      {/* Spotlight effect on target */}\n      <style>{`\n        .onboarding-highlight {\n          position: relative;\n          z-index: 102;\n          box-shadow: 0 0 0 4px rgba(var(--primary), 0.3), 0 0 0 9999px rgba(0, 0, 0, 0.5);\n          border-radius: 0.5rem;\n          animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n        }\n      `}</style>\n    </>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\OnboardingTour.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\Part2Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\PrivacyFooter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\SpeakButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\StructuredNoteForm.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleSave'. Either include it or remove the dependency array.","line":79,"column":6,"nodeType":"ArrayExpression","endLine":79,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [formData, conversationId, isRecording, handleSave]","fix":{"range":[2437,2476],"text":"[formData, conversationId, isRecording, handleSave]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadExistingNote'. Either include it or remove the dependency array.","line":86,"column":6,"nodeType":"ArrayExpression","endLine":86,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [conversationId, loadExistingNote]","fix":{"range":[2600,2616],"text":"[conversationId, loadExistingNote]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { VoiceInput } from \"@/components/VoiceInput\";\nimport { \n  Save, \n  FileText, \n  CheckCircle2, \n  Clock,\n  AlertCircle,\n  Sparkles,\n  Loader2\n} from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { format } from \"date-fns\";\n\ninterface StructuredNoteFormProps {\n  conversationId: string;\n  onSave?: () => void;\n}\n\ninterface StructuredNote {\n  id?: string;\n  client_perspective: string;\n  current_status: string;\n  response_to_interventions: string;\n  new_issues_presented: boolean;\n  new_issues_details: string;\n  goals_progress: string;\n  safety_assessment: string;\n  clinical_impression: string;\n  treatment_plan: string;\n  next_steps: string;\n  is_telehealth: boolean;\n}\n\nconst MAX_CHARS = 4000;\n\nexport const StructuredNoteForm = ({ conversationId, onSave }: StructuredNoteFormProps) => {\n  const [saving, setSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [analyzingField, setAnalyzingField] = useState<string | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [formData, setFormData] = useState<StructuredNote>({\n    client_perspective: \"\",\n    current_status: \"\",\n    response_to_interventions: \"\",\n    new_issues_presented: false,\n    new_issues_details: \"\",\n    goals_progress: \"\",\n    safety_assessment: \"\",\n    clinical_impression: \"\",\n    treatment_plan: \"\",\n    next_steps: \"\",\n    is_telehealth: false,\n  });\n\n  // Auto-save functionality with recording guard\n  useEffect(() => {\n    if (isRecording) {\n      console.log(\"StructuredNoteForm: Skipping auto-save while recording\");\n      return;\n    }\n\n    const autoSaveTimer = setTimeout(() => {\n      if (conversationId && Object.values(formData).some(v => v !== \"\" && v !== false)) {\n        console.log(\"StructuredNoteForm: Auto-save triggered\");\n        handleSave(true);\n      }\n    }, 30000);\n\n    return () => clearTimeout(autoSaveTimer);\n  }, [formData, conversationId, isRecording]);\n\n  // Load existing note if available\n  useEffect(() => {\n    if (conversationId) {\n      loadExistingNote();\n    }\n  }, [conversationId]);\n\n  const loadExistingNote = async () => {\n    try {\n      const { data, error } = await supabase\n        .from(\"structured_notes\")\n        .select(\"*\")\n        .eq(\"conversation_id\", conversationId)\n        .order(\"created_at\", { ascending: false })\n        .limit(1)\n        .maybeSingle();\n\n      if (error) throw error;\n\n      if (data) {\n        setFormData({\n          client_perspective: data.client_perspective || \"\",\n          current_status: data.current_status || \"\",\n          response_to_interventions: data.response_to_interventions || \"\",\n          new_issues_presented: data.new_issues_presented || false,\n          new_issues_details: data.new_issues_details || \"\",\n          goals_progress: data.goals_progress || \"\",\n          safety_assessment: data.safety_assessment || \"\",\n          clinical_impression: data.clinical_impression || \"\",\n          treatment_plan: data.treatment_plan || \"\",\n          next_steps: data.next_steps || \"\",\n          is_telehealth: data.is_telehealth || false,\n        });\n        setLastSaved(new Date(data.updated_at));\n      }\n    } catch (error) {\n      console.error(\"Error loading structured note:\", error);\n    }\n  };\n\n  const handleSave = async (autoSave = false) => {\n    setSaving(true);\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error(\"Not authenticated\");\n\n      // Check if note exists\n      const { data: existingNote } = await supabase\n        .from(\"structured_notes\")\n        .select(\"id\")\n        .eq(\"conversation_id\", conversationId)\n        .maybeSingle();\n\n      if (existingNote) {\n        // Update existing note\n        const { error } = await supabase\n          .from(\"structured_notes\")\n          .update({\n            ...formData,\n            updated_at: new Date().toISOString(),\n          })\n          .eq(\"id\", existingNote.id);\n\n        if (error) throw error;\n      } else {\n        // Create new note\n        const { error } = await supabase\n          .from(\"structured_notes\")\n          .insert({\n            ...formData,\n            conversation_id: conversationId,\n            user_id: user.id,\n          });\n\n        if (error) throw error;\n      }\n\n      setLastSaved(new Date());\n      \n      if (!autoSave) {\n        toast.success(\"Progress saved successfully\", {\n          icon: <CheckCircle2 className=\"h-4 w-4\" />,\n        });\n        onSave?.();\n      }\n    } catch (error) {\n      console.error(\"Error saving structured note:\", error);\n      toast.error(\"Failed to save progress\");\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updateField = (field: keyof StructuredNote, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleStartRecording = () => {\n    setIsRecording(true);\n    console.log(\"StructuredNoteForm: Recording started\");\n  };\n\n  const handleStopRecording = () => {\n    setIsRecording(false);\n    console.log(\"StructuredNoteForm: Recording stopped\");\n  };\n\n  const getCharCount = (text: string) => {\n    return `${text.length}/${MAX_CHARS}`;\n  };\n\n  const analyzeField = async (fieldName: keyof StructuredNote, fieldLabel: string) => {\n    setAnalyzingField(fieldName as string);\n    \n    try {\n      // Get conversation messages for context\n      const { data: messages } = await supabase\n        .from(\"messages\")\n        .select(\"content, role\")\n        .eq(\"conversation_id\", conversationId)\n        .order(\"created_at\", { ascending: true });\n\n      const conversationContext = messages?.map(m => `${m.role}: ${m.content}`).join(\"\\n\") || \"\";\n\n      const { data, error } = await supabase.functions.invoke(\"analyze-field\", {\n        body: {\n          fieldName,\n          fieldLabel,\n          currentValue: formData[fieldName],\n          conversationContext: conversationContext.slice(0, 8000), // Limit context size\n        },\n      });\n\n      if (error) throw error;\n\n      if (data?.suggestion) {\n        setFormData(prev => ({\n          ...prev,\n          [fieldName]: ((prev[fieldName] as unknown as string) && typeof prev[fieldName] === 'string')\n            ? `${prev[fieldName] as unknown as string} ${data.suggestion}`\n            : (data.suggestion as string),\n        }));\n        toast.success(`${fieldLabel} analyzed successfully`, {\n          icon: <Sparkles className=\"h-4 w-4\" />,\n          description: \"AI suggestion appended. Your existing text was not replaced.\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Error analyzing field:\", error);\n      toast.error(\"Failed to analyze field\");\n    } finally {\n      setAnalyzingField(null);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Structured Clinical Documentation\n            </CardTitle>\n            <CardDescription>\n              Complete the standardized clinical note form\n            </CardDescription>\n          </div>\n          {lastSaved && (\n            <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n              <Clock className=\"h-3 w-3\" />\n              Last saved: {format(lastSaved, \"h:mm a\")}\n            </Badge>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Session Type */}\n        <div className=\"space-y-2\">\n          <Label className=\"font-semibold\">Is this a telehealth visit?</Label>\n          <RadioGroup\n            value={formData.is_telehealth ? \"yes\" : \"no\"}\n            onValueChange={(value) => updateField(\"is_telehealth\", value === \"yes\")}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"yes\" id=\"telehealth-yes\" />\n              <Label htmlFor=\"telehealth-yes\" className=\"font-normal cursor-pointer\">\n                Yes\n              </Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"no\" id=\"telehealth-no\" />\n              <Label htmlFor=\"telehealth-no\" className=\"font-normal cursor-pointer\">\n                No\n              </Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        <Separator />\n\n        {/* Client Perspective */}\n        <div className=\"space-y-2\">\n          <div className=\"flex flex-wrap items-center justify-between gap-2\">\n            <Label htmlFor=\"client-perspective\" className=\"font-semibold flex-1\">\n              Document client's perspective (client's own words) on current problems, issues, needs, and progress\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"client_perspective\", \"Client's Perspective\")}\n              disabled={analyzingField === \"client_perspective\"}\n            >\n              {analyzingField === \"client_perspective\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <div className=\"flex items-start gap-2\">\n            <div className=\"flex-1\">\n              <Textarea\n                id=\"client-perspective\"\n                placeholder=\"Enter client's perspective...\"\n                value={formData.client_perspective}\n                onChange={(e) => updateField(\"client_perspective\", e.target.value)}\n                className=\"min-h-[120px] resize-y bg-secondary/50\"\n                maxLength={MAX_CHARS}\n              />\n            </div>\n            <VoiceInput\n              onResult={(text) => {\n                console.log(\"StructuredNoteForm: Voice delta for client_perspective:\", text);\n                setFormData(prev => ({\n                  ...prev,\n                  client_perspective: prev.client_perspective ? `${prev.client_perspective} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-xs text-muted-foreground\">\n              Max. {MAX_CHARS} characters\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.client_perspective)}\n            </p>\n          </div>\n        </div>\n\n        {/* Current Status */}\n        <div className=\"space-y-2\">\n          <div className=\"flex flex-wrap items-center justify-between gap-2\">\n            <Label htmlFor=\"current-status\" className=\"font-semibold flex-1\">\n              Document client's current status, assessed needs, and interventions used during this session\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"current_status\", \"Current Status\")}\n              disabled={analyzingField === \"current_status\"}\n            >\n              {analyzingField === \"current_status\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Present the provision of services provided to the client in an understandable manner.\n          </p>\n          <div className=\"flex items-start gap-2\">\n            <div className=\"flex-1\">\n              <Textarea\n                id=\"current-status\"\n                placeholder=\"Enter current status and interventions...\"\n                value={formData.current_status}\n                onChange={(e) => updateField(\"current_status\", e.target.value)}\n                className=\"min-h-[120px] resize-y bg-secondary/50\"\n                maxLength={MAX_CHARS}\n              />\n            </div>\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  current_status: prev.current_status ? `${prev.current_status} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.current_status)}\n            </p>\n          </div>\n        </div>\n\n        {/* Response to Interventions */}\n        <div className=\"space-y-2\">\n          <div className=\"flex flex-wrap items-center justify-between gap-2\">\n            <Label htmlFor=\"response-interventions\" className=\"font-semibold flex-1\">\n              Describe the client's response to interventions\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"response_to_interventions\", \"Response to Interventions\")}\n              disabled={analyzingField === \"response_to_interventions\"}\n            >\n              {analyzingField === \"response_to_interventions\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Include what steps need to be taken and/or completed by the next scheduled session.\n          </p>\n          <div className=\"flex items-start gap-2\">\n            <div className=\"flex-1\">\n              <Textarea\n                id=\"response-interventions\"\n                placeholder=\"Describe client's response...\"\n                value={formData.response_to_interventions}\n                onChange={(e) => updateField(\"response_to_interventions\", e.target.value)}\n                className=\"min-h-[120px] resize-y bg-secondary/50\"\n                maxLength={MAX_CHARS}\n              />\n            </div>\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  response_to_interventions: prev.response_to_interventions ? `${prev.response_to_interventions} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.response_to_interventions)}\n            </p>\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* New Issues */}\n        <div className=\"space-y-2\">\n          <Label className=\"font-semibold\">\n            SINCE LAST VISIT: Have new issues presented or significant changes occurred in the client's life?\n          </Label>\n          <RadioGroup\n            value={formData.new_issues_presented ? \"yes\" : \"no\"}\n            onValueChange={(value) => updateField(\"new_issues_presented\", value === \"yes\")}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"yes\" id=\"new-issues-yes\" />\n              <Label htmlFor=\"new-issues-yes\" className=\"font-normal cursor-pointer\">\n                Yes\n              </Label>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <RadioGroupItem value=\"no\" id=\"new-issues-no\" />\n              <Label htmlFor=\"new-issues-no\" className=\"font-normal cursor-pointer\">\n                No\n              </Label>\n            </div>\n          </RadioGroup>\n        </div>\n\n        {formData.new_issues_presented && (\n          <div className=\"space-y-2\">\n            <div className=\"flex flex-wrap items-center justify-between gap-2\">\n              <Label htmlFor=\"new-issues-details\" className=\"font-semibold flex-1\">\n                Provide details (be specific)\n              </Label>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => analyzeField(\"new_issues_details\", \"New Issues Details\")}\n                disabled={analyzingField === \"new_issues_details\"}\n                className=\"shrink-0\"\n              >\n                {analyzingField === \"new_issues_details\" ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <Sparkles className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n            <div className=\"flex gap-2\">\n              <Textarea\n                id=\"new-issues-details\"\n                placeholder=\"Describe new issues or changes...\"\n                value={formData.new_issues_details}\n                onChange={(e) => updateField(\"new_issues_details\", e.target.value)}\n                className=\"min-h-[120px] resize-y bg-secondary/50\"\n                maxLength={MAX_CHARS}\n              />\n              <VoiceInput\n                onResult={(text) => {\n                  setFormData(prev => ({\n                    ...prev,\n                    new_issues_details: prev.new_issues_details ? `${prev.new_issues_details} ${text}` : text,\n                  }));\n                }}\n                onStartRecording={handleStartRecording}\n                onStopRecording={handleStopRecording}\n              />\n            </div>\n            <div className=\"flex justify-end\">\n              <p className=\"text-xs text-muted-foreground\">\n                {getCharCount(formData.new_issues_details)}\n              </p>\n            </div>\n          </div>\n        )}\n\n        <Separator />\n\n        {/* Additional Fields */}\n        <div className=\"space-y-2\">\n          <div className=\"flex flex-wrap items-center justify-between gap-2\">\n            <Label htmlFor=\"goals-progress\" className=\"font-semibold flex-1\">\n              Progress Toward Treatment Goals\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"goals_progress\", \"Goals Progress\")}\n              disabled={analyzingField === \"goals_progress\"}\n            >\n              {analyzingField === \"goals_progress\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Textarea\n              id=\"goals-progress\"\n              placeholder=\"Document progress toward established treatment goals...\"\n              value={formData.goals_progress}\n              onChange={(e) => updateField(\"goals_progress\", e.target.value)}\n              className=\"min-h-[100px] resize-y bg-secondary/50\"\n              maxLength={MAX_CHARS}\n            />\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  goals_progress: prev.goals_progress ? `${prev.goals_progress} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.goals_progress)}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"safety-assessment\" className=\"font-semibold flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4 text-destructive\" />\n              Safety Assessment\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"safety_assessment\", \"Safety Assessment\")}\n              disabled={analyzingField === \"safety_assessment\"}\n            >\n              {analyzingField === \"safety_assessment\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Textarea\n              id=\"safety-assessment\"\n              placeholder=\"Document safety concerns, risk factors, and protective factors...\"\n              value={formData.safety_assessment}\n              onChange={(e) => updateField(\"safety_assessment\", e.target.value)}\n              className=\"min-h-[100px] resize-y bg-secondary/50\"\n              maxLength={MAX_CHARS}\n            />\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  safety_assessment: prev.safety_assessment ? `${prev.safety_assessment} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.safety_assessment)}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"clinical-impression\" className=\"font-semibold\">\n              Clinical Impression\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"clinical_impression\", \"Clinical Impression\")}\n              disabled={analyzingField === \"clinical_impression\"}\n            >\n              {analyzingField === \"clinical_impression\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Textarea\n              id=\"clinical-impression\"\n              placeholder=\"Provide clinical assessment and diagnostic impressions...\"\n              value={formData.clinical_impression}\n              onChange={(e) => updateField(\"clinical_impression\", e.target.value)}\n              className=\"min-h-[100px] resize-y bg-secondary/50\"\n              maxLength={MAX_CHARS}\n            />\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  clinical_impression: prev.clinical_impression ? `${prev.clinical_impression} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.clinical_impression)}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"treatment-plan\" className=\"font-semibold\">\n              Treatment Plan Updates\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"treatment_plan\", \"Treatment Plan\")}\n              disabled={analyzingField === \"treatment_plan\"}\n            >\n              {analyzingField === \"treatment_plan\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Textarea\n              id=\"treatment-plan\"\n              placeholder=\"Document any updates or modifications to the treatment plan...\"\n              value={formData.treatment_plan}\n              onChange={(e) => updateField(\"treatment_plan\", e.target.value)}\n              className=\"min-h-[100px] resize-y bg-secondary/50\"\n              maxLength={MAX_CHARS}\n            />\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  treatment_plan: prev.treatment_plan ? `${prev.treatment_plan} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.treatment_plan)}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <Label htmlFor=\"next-steps\" className=\"font-semibold\">\n              Next Steps / Follow-up\n            </Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => analyzeField(\"next_steps\", \"Next Steps\")}\n              disabled={analyzingField === \"next_steps\"}\n            >\n              {analyzingField === \"next_steps\" ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Sparkles className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n          <div className=\"flex gap-2\">\n            <Textarea\n              id=\"next-steps\"\n              placeholder=\"Document homework, action items, and follow-up plans...\"\n              value={formData.next_steps}\n              onChange={(e) => updateField(\"next_steps\", e.target.value)}\n              className=\"min-h-[100px] resize-y bg-secondary/50\"\n              maxLength={MAX_CHARS}\n            />\n            <VoiceInput\n              onResult={(text) => {\n                setFormData(prev => ({\n                  ...prev,\n                  next_steps: prev.next_steps ? `${prev.next_steps} ${text}` : text,\n                }));\n              }}\n              onStartRecording={handleStartRecording}\n              onStopRecording={handleStopRecording}\n            />\n          </div>\n          <div className=\"flex justify-end\">\n            <p className=\"text-xs text-muted-foreground\">\n              {getCharCount(formData.next_steps)}\n            </p>\n          </div>\n        </div>\n\n        {/* Save Button */}\n        <div className=\"flex justify-end pt-4\">\n          <Button\n            onClick={() => handleSave(false)}\n            disabled={saving}\n            size=\"lg\"\n            className=\"bg-primary hover:bg-primary/90\"\n          >\n            {saving ? (\n              <>\n                <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                Saving...\n              </>\n            ) : (\n              <>\n                <Save className=\"w-4 h-4 mr-2\" />\n                Save Progress\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\VoiceInput.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":23,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[769,772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[769,772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[930,933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[930,933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[967,970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[967,970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1344,1347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1344,1347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":43,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1381,1384],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1381,1384],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2915,2918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2915,2918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mic, MicOff } from \"lucide-react\";\nimport { toast } from \"sonner\";\nimport { cn } from \"@/lib/utils\";\n\n// Web Speech API types (browser API)\ninterface SpeechRecognitionEvent extends Event {\n  results: SpeechRecognitionResultList;\n  resultIndex: number;\n}\n\ninterface VoiceInputProps {\n  onResult: (text: string) => void;\n  disabled?: boolean;\n  onStartRecording?: () => void;\n  onStopRecording?: () => void;\n}\n\nexport const VoiceInput = ({ onResult, disabled, onStartRecording, onStopRecording }: VoiceInputProps) => {\n  const [recording, setRecording] = useState(false);\n  const [isSupported, setIsSupported] = useState(true);\n  const recognitionRef = useRef<any>(null);\n  const accumulatedTextRef = useRef<string>(\"\");\n\n  useEffect(() => {\n    // Check browser support on mount\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      setIsSupported(false);\n    }\n  }, []);\n\n  const handleStart = () => {\n    if (!isSupported) {\n      toast.error(\"Speech recognition is not supported in your browser\", {\n        description: \"Try using Chrome, Edge, or Safari\",\n      });\n      return;\n    }\n\n    try {\n      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      \n      // Reset accumulated text for new session\n      accumulatedTextRef.current = \"\";\n      \n      // Configuration\n      recognitionRef.current.lang = \"en-US\";\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = false; // Only final results\n      recognitionRef.current.maxAlternatives = 1;\n\n      // Handle results - emit ONLY the delta (new text)\n      recognitionRef.current.onresult = (event: SpeechRecognitionEvent) => {\n        let finalTranscript = \"\";\n\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript + \" \";\n          }\n        }\n\n        // Emit only the new delta since last emission\n        if (finalTranscript) {\n          const trimmedTranscript = finalTranscript.trim();\n          if (trimmedTranscript.length > accumulatedTextRef.current.length) {\n            const newDelta = trimmedTranscript.substring(accumulatedTextRef.current.length).trim();\n            console.log(\"VoiceInput: Emitting delta:\", {\n              newDelta,\n              finalLength: trimmedTranscript.length,\n              prevLength: accumulatedTextRef.current.length,\n            });\n            onResult(newDelta);\n            accumulatedTextRef.current = trimmedTranscript;\n          }\n        }\n      };\n\n      // Handle errors\n      recognitionRef.current.onerror = (event: any) => {\n        console.error(\"Speech recognition error:\", event.error);\n        setRecording(false);\n        accumulatedTextRef.current = \"\";\n        onStopRecording?.();\n        \n        if (event.error === \"no-speech\") {\n          toast.error(\"No speech detected\", {\n            description: \"Please try speaking again\",\n          });\n        } else if (event.error === \"not-allowed\") {\n          toast.error(\"Microphone access denied\", {\n            description: \"Please allow microphone access in your browser settings\",\n          });\n        } else {\n          toast.error(\"Speech recognition error\", {\n            description: event.error,\n          });\n        }\n      };\n\n      // Handle end\n      recognitionRef.current.onend = () => {\n        setRecording(false);\n        accumulatedTextRef.current = \"\";\n        onStopRecording?.();\n      };\n\n      // Start recognition\n      recognitionRef.current.start();\n      setRecording(true);\n      onStartRecording?.();\n      \n      toast.success(\"Listening...\", {\n        description: \"Speak your clinical notes\",\n        duration: 2000,\n      });\n    } catch (error) {\n      console.error(\"Error starting speech recognition:\", error);\n      toast.error(\"Failed to start voice input\");\n      setRecording(false);\n      accumulatedTextRef.current = \"\";\n      onStopRecording?.();\n    }\n  };\n\n  const handleStop = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      // onend will handle cleanup\n    }\n  };\n\n  return (\n    <Button\n      type=\"button\"\n      variant={recording ? \"destructive\" : \"outline\"}\n      size=\"icon\"\n      onClick={recording ? handleStop : handleStart}\n      disabled={disabled || !isSupported}\n      className={cn(\n        \"transition-all\",\n        recording && \"animate-pulse shadow-lg\"\n      )}\n      aria-label={recording ? \"Stop recording\" : \"Start voice input\"}\n      title={recording ? \"Click to stop recording\" : \"Click to start voice input\"}\n    >\n      {recording ? (\n        <MicOff className=\"h-4 w-4\" />\n      ) : (\n        <Mic className=\"h-4 w-4\" />\n      )}\n    </Button>\n  );\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\VoiceInterface.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[781,784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[781,784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\nimport { RealtimeChat } from '@/utils/RealtimeAudio';\nimport { Mic, MicOff } from 'lucide-react';\n\ninterface VoiceInterfaceProps {\n  onTranscript: (text: string) => void;\n  onSpeakingChange?: (speaking: boolean) => void;\n}\n\nconst VoiceInterface: React.FC<VoiceInterfaceProps> = ({ \n  onTranscript,\n  onSpeakingChange \n}) => {\n  const { toast } = useToast();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isAISpeaking, setIsAISpeaking] = useState(false);\n  const chatRef = useRef<RealtimeChat | null>(null);\n  const [currentTranscript, setCurrentTranscript] = useState('');\n\n  const handleMessage = (event: any) => {\n    console.log('Voice event:', event.type);\n    \n    if (event.type === 'response.audio.delta') {\n      setIsAISpeaking(true);\n      onSpeakingChange?.(true);\n    } else if (event.type === 'response.audio.done') {\n      setIsAISpeaking(false);\n      onSpeakingChange?.(false);\n    } else if (event.type === 'conversation.item.input_audio_transcription.completed') {\n      const transcript = event.transcript || '';\n      setCurrentTranscript(prev => prev + ' ' + transcript);\n      onTranscript(transcript);\n    } else if (event.type === 'response.audio_transcript.delta') {\n      // AI response transcript\n      const delta = event.delta || '';\n      setCurrentTranscript(prev => prev + delta);\n    } else if (event.type === 'response.done') {\n      if (currentTranscript) {\n        onTranscript(currentTranscript);\n        setCurrentTranscript('');\n      }\n    }\n  };\n\n  const startConversation = async () => {\n    try {\n      chatRef.current = new RealtimeChat(handleMessage);\n      await chatRef.current.init();\n      setIsConnected(true);\n      \n      toast({\n        title: \"Voice capture started\",\n        description: \"Speak naturally - the AI will transcribe and assist you\",\n      });\n    } catch (error) {\n      console.error('Error starting conversation:', error);\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : 'Failed to start voice capture',\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const endConversation = () => {\n    chatRef.current?.disconnect();\n    setIsConnected(false);\n    setIsAISpeaking(false);\n    onSpeakingChange?.(false);\n    \n    toast({\n      title: \"Voice capture ended\",\n      description: \"Session recording stopped\",\n    });\n  };\n\n  useEffect(() => {\n    return () => {\n      chatRef.current?.disconnect();\n    };\n  }, []);\n\n  return (\n    <div className=\"flex items-center gap-2\">\n      {!isConnected ? (\n        <Button \n          onClick={startConversation}\n          size=\"lg\"\n          className=\"gap-2\"\n        >\n          <Mic className=\"h-5 w-5\" />\n          Start Voice Capture\n        </Button>\n      ) : (\n        <Button \n          onClick={endConversation}\n          variant=\"destructive\"\n          size=\"lg\"\n          className=\"gap-2\"\n        >\n          <MicOff className=\"h-5 w-5\" />\n          {isAISpeaking ? 'AI Speaking...' : 'Stop Voice Capture'}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default VoiceInterface;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\WelcomeBanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\WelcomeGuide.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5987,5990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5987,5990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Brain, FileText, Lock, Sparkles, Zap, Shield } from \"lucide-react\";\nimport { Separator } from \"@/components/ui/separator\";\n\nexport const WelcomeGuide = () => {\n  const [open, setOpen] = useState(false);\n  const [dontShowAgain, setDontShowAgain] = useState(false);\n\n  useEffect(() => {\n    const hasSeenGuide = localStorage.getItem(\"clinicalai_has_seen_guide\");\n    if (!hasSeenGuide) {\n      setOpen(true);\n    }\n  }, []);\n\n  const handleClose = () => {\n    if (dontShowAgain) {\n      localStorage.setItem(\"clinicalai_has_seen_guide\", \"true\");\n    }\n    setOpen(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"w-12 h-12 rounded-xl bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n              <Brain className=\"w-7 h-7 text-white\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-2xl\">Welcome to ClinicalAI Assistant</DialogTitle>\n              <DialogDescription>\n                Transform your clinical notes into professional documentation\n              </DialogDescription>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6 py-4\">\n          {/* Key Features */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              Key Features\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FeatureCard\n                icon={FileText}\n                title=\"SOAP Notes\"\n                description=\"Generate comprehensive SOAP notes from your session observations\"\n              />\n              <FeatureCard\n                icon={Zap}\n                title=\"Quick Actions\"\n                description=\"One-click generation of summaries, key points, and progress reports\"\n              />\n              <FeatureCard\n                icon={FileText}\n                title=\"File Upload\"\n                description=\"Upload PDF or text documents for instant analysis\"\n              />\n              <FeatureCard\n                icon={FileText}\n                title=\"Export Options\"\n                description=\"Download conversations as PDF or text files\"\n              />\n            </div>\n          </div>\n\n          <Separator />\n\n          {/* How to Use */}\n          <div className=\"space-y-3\">\n            <h3 className=\"font-semibold text-foreground\">How to Use</h3>\n            <ol className=\"space-y-2 text-sm text-muted-foreground list-decimal list-inside\">\n              <li>Paste your session notes into the text area</li>\n              <li>Choose an analysis type using the quick action buttons</li>\n              <li>Review the AI-generated output in real-time</li>\n              <li>Export or copy the results for your records</li>\n              <li>All conversations are automatically saved in the sidebar</li>\n            </ol>\n          </div>\n\n          <Separator />\n\n          {/* Important Notices */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Shield className=\"w-5 h-5 text-primary\" />\n              Important Information\n            </h3>\n            \n            <div className=\"p-4 bg-amber-500/10 border border-amber-500/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-2 flex items-center gap-2\">\n                <FileText className=\"w-4 h-4 text-amber-600\" />\n                AI-Generated Content Disclaimer\n              </h4>\n              <p className=\"text-sm text-muted-foreground\">\n                All AI-generated clinical documentation should be reviewed and verified by a\n                qualified healthcare professional before use. This tool is designed to assist,\n                not replace, professional clinical judgment.\n              </p>\n            </div>\n\n            <div className=\"p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg\">\n              <h4 className=\"font-medium text-foreground mb-2 flex items-center gap-2\">\n                <Lock className=\"w-4 h-4 text-blue-600\" />\n                Privacy & Data Security\n              </h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Your data is encrypted and stored securely. All conversations are private and\n                accessible only to you. We follow industry-standard security practices to\n                protect your information. Never include personally identifiable information\n                (PII) in your notes.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex-col sm:flex-row gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"dont-show\"\n              checked={dontShowAgain}\n              onCheckedChange={(checked) => setDontShowAgain(checked as boolean)}\n            />\n            <Label\n              htmlFor=\"dont-show\"\n              className=\"text-sm text-muted-foreground cursor-pointer\"\n            >\n              Don't show this again\n            </Label>\n          </div>\n          <Button onClick={handleClose} className=\"bg-primary hover:bg-primary/90\">\n            Get Started\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst FeatureCard = ({\n  icon: Icon,\n  title,\n  description,\n}: {\n  icon: any;\n  title: string;\n  description: string;\n}) => (\n  <div className=\"flex gap-3 p-3 rounded-lg bg-secondary/30\">\n    <Icon className=\"w-5 h-5 text-primary flex-shrink-0 mt-0.5\" />\n    <div>\n      <h4 className=\"font-medium text-sm text-foreground\">{title}</h4>\n      <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n    </div>\n  </div>\n);\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\clients\\ClientDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":60,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1994,1997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1994,1997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3209,3212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3209,3212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":143,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4735,4738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4735,4738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nconst clientSchema = z.object({\n  first_name: z.string().min(1, \"First name is required\").max(100),\n  last_name: z.string().min(1, \"Last name is required\").max(100),\n  preferred_name: z.string().max(100).optional(),\n  date_of_birth: z.string().optional(),\n  email: z.string().email().max(255).optional().or(z.literal(\"\")),\n  phone: z.string().max(20).optional(),\n  gender: z.string().max(50).optional(),\n  pronouns: z.string().max(50).optional(),\n  emergency_contact_name: z.string().max(100).optional(),\n  emergency_contact_phone: z.string().max(20).optional(),\n  emergency_contact_relationship: z.string().max(50).optional(),\n  primary_diagnosis: z.string().max(500).optional(),\n  treatment_goals: z.string().max(2000).optional(),\n  insurance_provider: z.string().max(100).optional(),\n  insurance_id: z.string().max(100).optional(),\n  program_id: z.string().uuid().optional().or(z.literal(\"\")),\n  external_id: z.string().max(100).optional(),\n});\n\ntype ClientFormValues = z.infer<typeof clientSchema>;\n\ninterface ClientDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  mode: \"create\" | \"edit\";\n  client?: any;\n}\n\nexport function ClientDialog({ open, onOpenChange, mode, client }: ClientDialogProps) {\n  const queryClient = useQueryClient();\n\n  const { data: programs } = useQuery({\n    queryKey: [\"programs\"],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from(\"programs\")\n        .select(\"*\")\n        .order(\"name\");\n      if (error) throw error;\n      return data;\n    },\n  });\n\n  const form = useForm<ClientFormValues>({\n    resolver: zodResolver(clientSchema),\n    defaultValues: client\n      ? {\n          ...client,\n          date_of_birth: client.date_of_birth || \"\",\n          email: client.email || \"\",\n          program_id: client.program_id || \"\",\n          external_id: client.external_id || \"\",\n        }\n      : {\n          first_name: \"\",\n          last_name: \"\",\n        },\n  });\n\n  const onSubmit = async (values: ClientFormValues) => {\n    try {\n      const { data: { user }, error: authError } = await supabase.auth.getUser();\n      \n      if (authError || !user) {\n        console.error(\"Auth error:\", authError);\n        toast.error(\"You must be logged in to create a client. Please refresh and log in again.\");\n        return;\n      }\n\n      const cleanedValues: any = {\n        user_id: user.id,\n        first_name: values.first_name,\n        last_name: values.last_name,\n        preferred_name: values.preferred_name || null,\n        date_of_birth: values.date_of_birth || null,\n        email: values.email || null,\n        phone: values.phone || null,\n        gender: values.gender || null,\n        pronouns: values.pronouns || null,\n        emergency_contact_name: values.emergency_contact_name || null,\n        emergency_contact_phone: values.emergency_contact_phone || null,\n        emergency_contact_relationship: values.emergency_contact_relationship || null,\n        primary_diagnosis: values.primary_diagnosis || null,\n        treatment_goals: values.treatment_goals || null,\n        insurance_provider: values.insurance_provider || null,\n        insurance_id: values.insurance_id || null,\n        program_id: values.program_id || null,\n        external_id: values.external_id || null,\n      };\n\n      if (mode === \"edit\" && client) {\n        const { error } = await supabase\n          .from(\"clients\")\n          .update(cleanedValues)\n          .eq(\"id\", client.id);\n\n        if (error) throw error;\n        toast.success(\"Client updated successfully\");\n      } else {\n        const { error } = await supabase.from(\"clients\").insert([cleanedValues]);\n\n        if (error) throw error;\n        toast.success(\"Client created successfully\");\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"clients\"] });\n      onOpenChange(false);\n      form.reset();\n    } catch (error: any) {\n      toast.error(error.message || \"Failed to save client\");\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {mode === \"create\" ? \"Add New Client\" : \"Edit Client\"}\n          </DialogTitle>\n          <DialogDescription>\n            Enter the client's information. Required fields are marked with *.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <Tabs defaultValue=\"basic\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"basic\">Basic Info</TabsTrigger>\n                <TabsTrigger value=\"demographics\">Demographics</TabsTrigger>\n                <TabsTrigger value=\"clinical\">Clinical</TabsTrigger>\n                <TabsTrigger value=\"emergency\">Emergency</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"basic\" className=\"space-y-4 mt-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"first_name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"last_name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"preferred_name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Preferred Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"date_of_birth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date of Birth</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input type=\"tel\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"program_id\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Program</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select program\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {programs?.map((program) => (\n                            <SelectItem key={program.id} value={program.id}>\n                              {program.name}\n                              {program.is_part2 && \" (Part 2)\"}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"external_id\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>External ID</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"For external system integration\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </TabsContent>\n\n              <TabsContent value=\"demographics\" className=\"space-y-4 mt-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"gender\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gender</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"pronouns\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Pronouns</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., she/her, they/them\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"clinical\" className=\"space-y-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"primary_diagnosis\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Primary Diagnosis</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"treatment_goals\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Treatment Goals</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={4} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"insurance_provider\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Insurance Provider</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"insurance_id\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Insurance ID</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"emergency\" className=\"space-y-4 mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"emergency_contact_name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Emergency Contact Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"emergency_contact_phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Emergency Contact Phone</FormLabel>\n                        <FormControl>\n                          <Input type=\"tel\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"emergency_contact_relationship\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Relationship</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Spouse, Parent\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end gap-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\">\n                {mode === \"create\" ? \"Create Client\" : \"Save Changes\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\clients\\ClientSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\clients\\ClientsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[824,827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[824,827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Eye, Edit, Archive, FileText, Mic } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ClientDialog } from \"./ClientDialog\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"sonner\";\nimport { logClientView, batchLogClientViews } from \"@/lib/clientAudit\";\n\ninterface ClientsListProps {\n  searchQuery: string;\n}\n\nexport function ClientsList({ searchQuery }: ClientsListProps) {\n  const [selectedClient, setSelectedClient] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const { data: clients, isLoading } = useQuery({\n    queryKey: [\"clients\"],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from(\"clients\")\n        .select(`\n          *,\n          programs (\n            id,\n            name,\n            is_part2\n          )\n        `)\n        .eq(\"is_active\", true)\n        .order(\"last_name\", { ascending: true });\n\n      if (error) throw error;\n      return data;\n    },\n  });\n\n  const handleArchiveClient = async (clientId: string) => {\n    const { error } = await supabase\n      .from(\"clients\")\n      .update({ is_active: false })\n      .eq(\"id\", clientId);\n\n    if (error) {\n      toast.error(\"Failed to archive client\");\n    } else {\n      toast.success(\"Client archived successfully\");\n    }\n  };\n\n  const filteredClients = clients?.filter((client) => {\n    const query = searchQuery.toLowerCase();\n    return (\n      client.first_name?.toLowerCase().includes(query) ||\n      client.last_name?.toLowerCase().includes(query) ||\n      client.email?.toLowerCase().includes(query) ||\n      client.primary_diagnosis?.toLowerCase().includes(query)\n    );\n  });\n\n  // HIPAA REQUIREMENT: Log batch audit when client list is displayed\n  // This addresses the finding from security reviews about missing list view auditing\n  useEffect(() => {\n    if (filteredClients && filteredClients.length > 0) {\n      const clientIds = filteredClients.map(c => c.id);\n      batchLogClientViews(clientIds).catch(err => {\n        console.error('Failed to log batch client views:', err);\n        // Don't block UI on audit logging failures\n      });\n    }\n  }, [filteredClients]);\n\n  if (isLoading) {\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {[1, 2, 3, 4, 5, 6].map((i) => (\n          <Card key={i} className=\"p-6\">\n            <Skeleton className=\"h-6 w-3/4 mb-4\" />\n            <Skeleton className=\"h-4 w-full mb-2\" />\n            <Skeleton className=\"h-4 w-2/3\" />\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!filteredClients || filteredClients.length === 0) {\n    return (\n      <Card className=\"p-12 text-center\">\n        <FileText className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n        <h3 className=\"text-xl font-semibold mb-2\">No clients found</h3>\n        <p className=\"text-muted-foreground mb-6\">\n          {searchQuery\n            ? \"Try adjusting your search criteria\"\n            : \"Get started by adding your first client\"}\n        </p>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {filteredClients.map((client) => (\n          <Card key={client.id} className=\"p-6 hover:shadow-lg transition-shadow\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"flex-1\">\n                <h3 className=\"text-xl font-semibold text-foreground\">\n                  {client.first_name} {client.last_name}\n                  {client.preferred_name && (\n                    <span className=\"text-sm text-muted-foreground ml-2\">\n                      ({client.preferred_name})\n                    </span>\n                  )}\n                </h3>\n                {client.date_of_birth && (\n                  <p className=\"text-sm text-muted-foreground\">\n                    DOB: {format(new Date(client.date_of_birth), \"MM/dd/yyyy\")}\n                  </p>\n                )}\n              </div>\n              {client.programs?.is_part2 && (\n                <Badge variant=\"destructive\">Part 2</Badge>\n              )}\n            </div>\n\n            {client.primary_diagnosis && (\n              <p className=\"text-sm mb-2\">\n                <span className=\"font-medium\">Diagnosis:</span>{\" \"}\n                {client.primary_diagnosis}\n              </p>\n            )}\n\n            {client.programs && (\n              <p className=\"text-sm mb-4\">\n                <span className=\"font-medium\">Program:</span> {client.programs.name}\n              </p>\n            )}\n\n            <div className=\"flex gap-2 mt-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  // Log the client view before navigating (HIPAA requirement)\n                  logClientView(client.id).catch(err => {\n                    console.error('Failed to log client view:', err);\n                  });\n                  navigate(`/client/${client.id}`);\n                }}\n                className=\"flex-1\"\n              >\n                <Eye className=\"h-4 w-4 mr-1\" />\n                View\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setSelectedClient(client);\n                  setIsDialogOpen(true);\n                }}\n              >\n                <Edit className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleArchiveClient(client.id)}\n              >\n                <Archive className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </Card>\n        ))}\n      </div>\n\n      {selectedClient && (\n        <ClientDialog\n          open={isDialogOpen}\n          onOpenChange={(open) => {\n            setIsDialogOpen(open);\n            if (!open) setSelectedClient(null);\n          }}\n          mode=\"edit\"\n          client={selectedClient}\n        />\n      )}\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\clients\\RecordingUpload.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3584,3587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3584,3587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast } from \"sonner\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Upload, Mic } from \"lucide-react\";\n\ninterface RecordingUploadProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  clientId: string;\n  conversationId?: string;\n}\n\nexport function RecordingUpload({\n  open,\n  onOpenChange,\n  clientId,\n  conversationId,\n}: RecordingUploadProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const queryClient = useQueryClient();\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      // Validate file type (audio files)\n      if (!selectedFile.type.startsWith(\"audio/\")) {\n        toast.error(\"Please select an audio file\");\n        return;\n      }\n      // Validate file size (max 100MB)\n      if (selectedFile.size > 100 * 1024 * 1024) {\n        toast.error(\"File size must be less than 100MB\");\n        return;\n      }\n      setFile(selectedFile);\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!file) return;\n\n    setUploading(true);\n    setProgress(10);\n\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error(\"Not authenticated\");\n\n      setProgress(30);\n\n      // Upload to storage\n      const fileExt = file.name.split(\".\").pop();\n      const fileName = `${user.id}/${Date.now()}.${fileExt}`;\n      \n      const { error: uploadError } = await supabase.storage\n        .from(\"recordings\")\n        .upload(fileName, file, {\n          cacheControl: \"3600\",\n          upsert: false,\n        });\n\n      if (uploadError) throw uploadError;\n\n      setProgress(60);\n\n      // Generate signed URL for secure access (1 hour expiry)\n      const { data: signedData, error: signedError } = await supabase.storage\n        .from(\"recordings\")\n        .createSignedUrl(fileName, 3600);\n\n      if (signedError) throw signedError;\n\n      setProgress(80);\n\n      // Get audio duration (if possible)\n      const audio = new Audio();\n      const duration = await new Promise<number>((resolve) => {\n        audio.addEventListener(\"loadedmetadata\", () => {\n          resolve(Math.floor(audio.duration));\n        });\n        audio.addEventListener(\"error\", () => {\n          resolve(0);\n        });\n        audio.src = URL.createObjectURL(file);\n      });\n\n      // Create recording record with signed URL\n      const { error: dbError } = await supabase.from(\"recordings\").insert({\n        user_id: user.id,\n        client_id: clientId,\n        conversation_id: conversationId || null,\n        file_name: file.name,\n        file_url: signedData.signedUrl,\n        file_size: file.size,\n        duration_seconds: duration || null,\n        transcription_status: \"pending\",\n      });\n\n      if (dbError) throw dbError;\n\n      setProgress(100);\n      toast.success(\"Recording uploaded successfully\");\n      \n      queryClient.invalidateQueries({ queryKey: [\"client-recordings\", clientId] });\n      onOpenChange(false);\n      setFile(null);\n      setProgress(0);\n    } catch (error: any) {\n      console.error(\"Upload error:\", error);\n      toast.error(error.message || \"Failed to upload recording\");\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Upload Session Recording</DialogTitle>\n          <DialogDescription>\n            Upload an audio recording of a therapy session\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"recording\">Audio File</Label>\n            <div className=\"mt-2\">\n              <Input\n                id=\"recording\"\n                type=\"file\"\n                accept=\"audio/*\"\n                onChange={handleFileChange}\n                disabled={uploading}\n              />\n            </div>\n            {file && (\n              <div className=\"mt-2 p-3 bg-muted rounded-md flex items-center gap-2\">\n                <Mic className=\"h-4 w-4 text-muted-foreground\" />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {(file.size / (1024 * 1024)).toFixed(2)} MB\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {uploading && (\n            <div className=\"space-y-2\">\n              <Label>Upload Progress</Label>\n              <Progress value={progress} />\n              <p className=\"text-sm text-muted-foreground text-center\">\n                {progress}%\n              </p>\n            </div>\n          )}\n\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={uploading}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpload}\n              disabled={!file || uploading}\n            >\n              <Upload className=\"mr-2 h-4 w-4\" />\n              {uploading ? \"Uploading...\" : \"Upload Recording\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\n}\n\nexport { Badge, badgeVariants };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":47,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":47,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[710,761],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Search } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\nCommand.displayName = CommandPrimitive.displayName;\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    />\n  </div>\n));\n\nCommandInput.displayName = CommandPrimitive.Input.displayName;\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n));\n\nCommandList.displayName = CommandPrimitive.List.displayName;\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />);\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\n));\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className,\n    )}\n    {...props}\n  />\n));\n\nCommandItem.displayName = CommandPrimitive.Item.displayName;\n\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\n};\nCommandShortcut.displayName = \"CommandShortcut\";\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":129,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":129,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Label } from \"@/components/ui/label\";\n\nconst Form = FormProvider;\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = {\n  name: TName;\n};\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n};\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext);\n  const itemContext = React.useContext(FormItemContext);\n  const { getFieldState, formState } = useFormContext();\n\n  const fieldState = getFieldState(fieldContext.name, formState);\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\");\n  }\n\n  const { id } = itemContext;\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  };\n};\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\n\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => {\n    const id = React.useId();\n\n    return (\n      <FormItemContext.Provider value={{ id }}>\n        <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n      </FormItemContext.Provider>\n    );\n  },\n);\nFormItem.displayName = \"FormItem\";\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField();\n\n  return <Label ref={ref} className={cn(error && \"text-destructive\", className)} htmlFor={formItemId} {...props} />;\n});\nFormLabel.displayName = \"FormLabel\";\n\nconst FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(\n  ({ ...props }, ref) => {\n    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\n\n    return (\n      <Slot\n        ref={ref}\n        id={formItemId}\n        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\n        aria-invalid={!!error}\n        {...props}\n      />\n    );\n  },\n);\nFormControl.displayName = \"FormControl\";\n\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, ...props }, ref) => {\n    const { formDescriptionId } = useFormField();\n\n    return <p ref={ref} id={formDescriptionId} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />;\n  },\n);\nFormDescription.displayName = \"FormDescription\";\n\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\n  ({ className, children, ...props }, ref) => {\n    const { error, formMessageId } = useFormField();\n    const body = error ? String(error?.message) : children;\n\n    if (!body) {\n      return null;\n    }\n\n    return (\n      <p ref={ref} id={formMessageId} className={cn(\"text-sm font-medium text-destructive\", className)} {...props}>\n        {body}\n      </p>\n    );\n  },\n);\nFormMessage.displayName = \"FormMessage\";\n\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":111,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":111,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\nimport { cva } from \"class-variance-authority\";\nimport { ChevronDown } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className)}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n));\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className)}\n    {...props}\n  />\n));\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\n);\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n));\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto\",\n      className,\n    )}\n    {...props}\n  />\n));\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n));\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className,\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n));\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":636,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":636,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {\n  const isMobile = useIsMobile();\n  const [openMobile, setOpenMobile] = React.useState(false);\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen);\n  const open = openProp ?? _open;\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value;\n      if (setOpenProp) {\n        setOpenProp(openState);\n      } else {\n        _setOpen(openState);\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n    },\n    [setOpenProp, open],\n  );\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile]);\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\n        event.preventDefault();\n        toggleSidebar();\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar]);\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\";\n\n  const contextValue = React.useMemo<SidebarContext>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\n  );\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className)}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n});\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }, ref) => {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"group peer hidden text-sidebar-foreground md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        className={cn(\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n        )}\n      />\n      <div\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className,\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(\n  ({ className, onClick, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <Button\n        ref={ref}\n        data-sidebar=\"trigger\"\n        variant=\"ghost\"\n        size=\"icon\"\n        className={cn(\"h-7 w-7\", className)}\n        onClick={(event) => {\n          onClick?.(event);\n          toggleSidebar();\n        }}\n        {...props}\n      >\n        <PanelLeft />\n        <span className=\"sr-only\">Toggle Sidebar</span>\n      </Button>\n    );\n  },\n);\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\">>(\n  ({ className, ...props }, ref) => {\n    const { toggleSidebar } = useSidebar();\n\n    return (\n      <button\n        ref={ref}\n        data-sidebar=\"rail\"\n        aria-label=\"Toggle Sidebar\"\n        tabIndex={-1}\n        onClick={toggleSidebar}\n        title=\"Toggle Sidebar\"\n        className={cn(\n          \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex\",\n          \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n          \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n          \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n          \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n          \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<\"main\">>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Input\n        ref={ref}\n        data-sidebar=\"input\"\n        className={cn(\n          \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"header\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return <div ref={ref} data-sidebar=\"footer\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(\n  ({ className, ...props }, ref) => {\n    return (\n      <Separator\n        ref={ref}\n        data-sidebar=\"separator\"\n        className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n        {...props}\n      />\n    );\n  },\n);\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"div\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-label\"\n        className={cn(\n          \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & { asChild?: boolean }>(\n  ({ className, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        ref={ref}\n        data-sidebar=\"group-action\"\n        className={cn(\n          \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n          // Increases the hit area of the button on mobile.\n          \"after:absolute after:-inset-2 after:md:hidden\",\n          \"group-data-[collapsible=icon]:hidden\",\n          className,\n        )}\n        {...props}\n      />\n    );\n  },\n);\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} data-sidebar=\"group-content\" className={cn(\"w-full text-sm\", className)} {...props} />\n  ),\n);\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({ className, ...props }, ref) => (\n  <ul ref={ref} data-sidebar=\"menu\" className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)} {...props} />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\n  <li ref={ref} data-sidebar=\"menu-item\" className={cn(\"group/menu-item relative\", className)} {...props} />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n  const { isMobile, state } = useSidebar();\n\n  const button = (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  );\n\n  if (!tooltip) {\n    return button;\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    };\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\n    </Tooltip>\n  );\n});\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\n  ({ className, ...props }, ref) => (\n    <ul\n      ref={ref}\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  ),\n);\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ ...props }, ref) => (\n  <li ref={ref} {...props} />\n));\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":27,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":27,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\";\nimport { Toaster as Sonner, toast } from \"sonner\";\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme();\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton: \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton: \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  );\n};\n\nexport { Toaster, toast };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[75,159],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = \"Textarea\";\n\nexport { Textarea };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline: \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />\n));\n\nToggle.displayName = TogglePrimitive.Root.displayName;\n\nexport { Toggle, toggleVariants };\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\constants\\examplePrompts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\constants\\noteTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\hooks\\useConversations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1873,1876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1873,1876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2970,2973],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2970,2973],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3455,3458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3455,3458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchConversations'. Either include it or remove the dependency array.","line":141,"column":6,"nodeType":"ArrayExpression","endLine":141,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchConversations]","fix":{"range":[4039,4041],"text":"[fetchConversations]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast } from \"sonner\";\n\ninterface Conversation {\n  id: string;\n  title: string;\n  created_at: string;\n  updated_at: string;\n  is_part2_protected?: boolean;\n  data_classification?: string;\n  part2_consent_status?: string;\n}\n\nexport const useConversations = () => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(true);\n  const [limit] = useState(20);\n\n  const fetchConversations = async (offset = 0) => {\n    try {\n      const { data, error, count } = await supabase\n        .from(\"conversations\")\n        .select(\"id, title, created_at, updated_at, is_part2_protected, data_classification, part2_consent_status, client_id\", { count: \"exact\" })\n        .order(\"updated_at\", { ascending: false })\n        .range(offset, offset + limit - 1);\n\n      if (error) throw error;\n      \n      // SECURITY FIX: Log PHI access for each conversation viewed\n      if (data && data.length > 0) {\n        // Log access for conversations with client_id (PHI)\n        for (const convo of data) {\n          if (convo.client_id) {\n            try {\n              await supabase.rpc('log_client_view', {\n                _client_id: convo.client_id,\n                _access_method: 'conversation_list'\n              });\n            } catch (logError) {\n              // Don't block UI on logging failure, but log error\n              console.error('Failed to log client view:', logError);\n            }\n          }\n        }\n      }\n      \n      if (offset === 0) {\n        setConversations(data || []);\n      } else {\n        setConversations((prev) => [...prev, ...(data || [])]);\n      }\n      \n      setHasMore((data?.length || 0) === limit);\n    } catch (error: any) {\n      console.error(\"Error fetching conversations:\", error);\n      toast.error(\"Failed to load conversation history\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadMore = () => {\n    if (!loading && hasMore) {\n      fetchConversations(conversations.length);\n    }\n  };\n\n  const createConversation = async (\n    title: string, \n    isPart2Protected: boolean = false,\n    clientId?: string\n  ): Promise<string | null> => {\n    try {\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error(\"User not authenticated\");\n\n      const { data, error } = await supabase\n        .from(\"conversations\")\n        .insert([{ \n          user_id: user.id, \n          title,\n          is_part2_protected: isPart2Protected,\n          data_classification: isPart2Protected ? 'part2_protected' : 'standard_phi',\n          client_id: clientId && clientId !== 'none' ? clientId : null\n        }])\n        .select(\"id\")\n        .single();\n\n      if (error) throw error;\n      \n      await fetchConversations();\n      return data.id;\n    } catch (error: any) {\n      console.error(\"Error creating conversation:\", error);\n      toast.error(\"Failed to create conversation\");\n      return null;\n    }\n  };\n\n  const deleteConversation = async (conversationId: string) => {\n    try {\n      const { error } = await supabase\n        .from(\"conversations\")\n        .delete()\n        .eq(\"id\", conversationId);\n\n      if (error) throw error;\n      \n      await fetchConversations();\n      toast.success(\"Conversation deleted\");\n    } catch (error: any) {\n      console.error(\"Error deleting conversation:\", error);\n      toast.error(\"Failed to delete conversation\");\n    }\n  };\n\n  useEffect(() => {\n    fetchConversations();\n\n    // Set up realtime subscription\n    const channel = supabase\n      .channel(\"conversations-changes\")\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"*\",\n          schema: \"public\",\n          table: \"conversations\",\n        },\n        () => {\n          fetchConversations();\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, []);\n\n  return {\n    conversations,\n    loading,\n    hasMore,\n    createConversation,\n    deleteConversation,\n    refreshConversations: fetchConversations,\n    loadMore,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\hooks\\useMessages.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1791,1794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1791,1794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2527,2530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2527,2530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: [conversationId, fetchMessages]","fix":{"range":[3264,3280],"text":"[conversationId, fetchMessages]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast } from \"sonner\";\n\nexport interface Message {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  created_at: string;\n}\n\nexport const useMessages = (conversationId: string | null) => {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const fetchMessages = async () => {\n    if (!conversationId) {\n      setMessages([]);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      // SECURITY FIX: Get conversation details first to check if it has a client_id\n      const { data: conversation, error: convoError } = await supabase\n        .from(\"conversations\")\n        .select(\"client_id\")\n        .eq(\"id\", conversationId)\n        .single();\n\n      if (convoError) throw convoError;\n\n      // SECURITY FIX: Log PHI access if conversation is linked to a client\n      if (conversation?.client_id) {\n        try {\n          await supabase.rpc('log_client_view', {\n            _client_id: conversation.client_id,\n            _access_method: 'message_view'\n          });\n        } catch (logError) {\n          console.error('Failed to log client view:', logError);\n          // Don't block message loading on logging failure\n        }\n      }\n\n      const { data, error } = await supabase\n        .from(\"messages\")\n        .select(\"*\")\n        .eq(\"conversation_id\", conversationId)\n        .order(\"created_at\", { ascending: true });\n\n      if (error) throw error;\n      \n      // Cast the data to Message[] type\n      const typedMessages = (data || []).map(msg => ({\n        ...msg,\n        role: msg.role as \"user\" | \"assistant\"\n      }));\n      \n      setMessages(typedMessages);\n    } catch (error: any) {\n      console.error(\"Error fetching messages:\", error);\n      toast.error(\"Failed to load messages\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addMessage = async (role: \"user\" | \"assistant\", content: string) => {\n    if (!conversationId) return null;\n\n    try {\n      const { data, error } = await supabase\n        .from(\"messages\")\n        .insert([{ conversation_id: conversationId, role, content }])\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Update conversation's updated_at timestamp\n      await supabase\n        .from(\"conversations\")\n        .update({ updated_at: new Date().toISOString() })\n        .eq(\"id\", conversationId);\n\n      return data;\n    } catch (error: any) {\n      console.error(\"Error adding message:\", error);\n      toast.error(\"Failed to save message\");\n      return null;\n    }\n  };\n\n  useEffect(() => {\n    fetchMessages();\n\n    if (!conversationId) return;\n\n    // Set up realtime subscription for messages\n    const channel = supabase\n      .channel(`messages-${conversationId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"INSERT\",\n          schema: \"public\",\n          table: \"messages\",\n          filter: `conversation_id=eq.${conversationId}`,\n        },\n        (payload) => {\n          setMessages((prev) => [...prev, payload.new as Message]);\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [conversationId]);\n\n  return {\n    messages,\n    loading,\n    addMessage,\n    refreshMessages: fetchMessages,\n  };\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\hooks\\useOnboarding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\clientAudit.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\exportUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":128,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3670,3673],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3670,3673],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5319,5322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5319,5322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":218,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6753,6756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6753,6756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jsPDF from \"jspdf\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast as showToast } from \"sonner\";\nimport DOMPurify from \"dompurify\";\n\n/**\n * Represents a message in a conversation\n */\ninterface Message {\n  id: string;\n  role: string;\n  content: string;\n  created_at: string;\n}\n\n/**\n * Sanitizes text content to prevent XSS and injection attacks\n * @param content - The text content to sanitize\n * @returns Sanitized text content\n */\nconst sanitizeContent = (content: string): string => {\n  return DOMPurify.sanitize(content, { ALLOWED_TAGS: [] });\n};\n\n/**\n * Creates a download link and triggers a file download\n * @param blob - The file blob to download\n * @param filename - The name for the downloaded file\n */\nconst triggerDownload = (blob: Blob, filename: string): void => {\n  const url = URL.createObjectURL(blob);\n  const anchor = document.createElement(\"a\");\n  anchor.href = url;\n  anchor.download = filename;\n  \n  try {\n    // Append to body, click, and cleanup\n    document.body.appendChild(anchor);\n    anchor.click();\n  } finally {\n    // Always cleanup, even if click fails\n    document.body.removeChild(anchor);\n    URL.revokeObjectURL(url);\n  }\n};\n\n/**\n * Exports a conversation to a PDF file\n * @param conversationId - The ID of the conversation to export\n * @param title - The title for the exported PDF\n */\nexport const exportConversationToPDF = async (conversationId: string, title: string) => {\n  try {\n    showToast.info(\"Generating PDF...\");\n\n    // Fetch messages\n    const { data: messages, error } = await supabase\n      .from(\"messages\")\n      .select(\"*\")\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) throw error;\n\n    // Create PDF\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n    const margin = 20;\n    const maxWidth = pageWidth - 2 * margin;\n    let y = margin;\n\n    // Sanitize and add title\n    const sanitizedTitle = sanitizeContent(title);\n    pdf.setFontSize(18);\n    pdf.setFont(\"helvetica\", \"bold\");\n    pdf.text(sanitizedTitle, margin, y);\n    y += 10;\n\n    // Add date\n    pdf.setFontSize(10);\n    pdf.setFont(\"helvetica\", \"normal\");\n    pdf.setTextColor(100);\n    pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, y);\n    y += 15;\n\n    pdf.setTextColor(0);\n\n    // Add messages\n    messages?.forEach((message: Message) => {\n      // Check if we need a new page\n      if (y > pageHeight - 40) {\n        pdf.addPage();\n        y = margin;\n      }\n\n      // Message header\n      pdf.setFontSize(11);\n      pdf.setFont(\"helvetica\", \"bold\");\n      const role = message.role === \"user\" ? \"You\" : \"AI Assistant\";\n      const timestamp = new Date(message.created_at).toLocaleString();\n      pdf.text(`${role} - ${timestamp}`, margin, y);\n      y += 7;\n\n      // Sanitize and add message content\n      pdf.setFontSize(10);\n      pdf.setFont(\"helvetica\", \"normal\");\n      const sanitizedContent = sanitizeContent(message.content);\n      const lines = pdf.splitTextToSize(sanitizedContent, maxWidth);\n      \n      lines.forEach((line: string) => {\n        if (y > pageHeight - 20) {\n          pdf.addPage();\n          y = margin;\n        }\n        pdf.text(line, margin, y);\n        y += 5;\n      });\n\n      y += 5; // Space between messages\n    });\n\n    // Save PDF with sanitized filename\n    const sanitizedFilename = sanitizeContent(title).replace(/[^a-z0-9]/gi, \"_\");\n    const fileName = `${sanitizedFilename}_${Date.now()}.pdf`;\n    pdf.save(fileName);\n    showToast.success(\"PDF downloaded successfully!\");\n  } catch (error: any) {\n    console.error(\"Error exporting to PDF:\", error);\n    showToast.error(\"Failed to export PDF\");\n  }\n};\n\n/**\n * Exports a conversation to a plain text file\n * @param conversationId - The ID of the conversation to export\n * @param title - The title for the exported text file\n */\nexport const exportConversationToText = async (conversationId: string, title: string) => {\n  try {\n    // Fetch messages\n    const { data: messages, error } = await supabase\n      .from(\"messages\")\n      .select(\"*\")\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) throw error;\n\n    // Sanitize title\n    const sanitizedTitle = sanitizeContent(title);\n\n    // Create text content with sanitized data\n    let text = `${sanitizedTitle}\\n`;\n    text += `Generated: ${new Date().toLocaleString()}\\n`;\n    text += \"=\".repeat(80) + \"\\n\\n\";\n\n    messages?.forEach((message: Message) => {\n      const role = message.role === \"user\" ? \"You\" : \"AI Assistant\";\n      const timestamp = new Date(message.created_at).toLocaleString();\n      const sanitizedContent = sanitizeContent(message.content);\n      \n      text += `[${role} - ${timestamp}]\\n`;\n      text += `${sanitizedContent}\\n\\n`;\n      text += \"-\".repeat(80) + \"\\n\\n\";\n    });\n\n    // Download as text file with proper cleanup\n    const blob = new Blob([text], { type: \"text/plain\" });\n    const sanitizedFilename = sanitizeContent(title).replace(/[^a-z0-9]/gi, \"_\");\n    const filename = `${sanitizedFilename}_${Date.now()}.txt`;\n    \n    triggerDownload(blob, filename);\n    showToast.success(\"Text file downloaded successfully!\");\n  } catch (error: any) {\n    console.error(\"Error exporting to text:\", error);\n    showToast.error(\"Failed to export text file\");\n  }\n};\n\n/**\n * Copies a conversation to the clipboard as formatted text\n * @param conversationId - The ID of the conversation to copy\n * @param title - The title for the copied content\n */\nexport const copyConversationToClipboard = async (conversationId: string, title: string) => {\n  try {\n    // Fetch messages\n    const { data: messages, error } = await supabase\n      .from(\"messages\")\n      .select(\"*\")\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) throw error;\n\n    // Sanitize title\n    const sanitizedTitle = sanitizeContent(title);\n\n    // Create formatted text with sanitized content\n    let text = `${sanitizedTitle}\\n`;\n    text += `Generated: ${new Date().toLocaleString()}\\n`;\n    text += \"=\".repeat(80) + \"\\n\\n\";\n\n    messages?.forEach((message: Message) => {\n      const role = message.role === \"user\" ? \"You\" : \"AI Assistant\";\n      const timestamp = new Date(message.created_at).toLocaleString();\n      const sanitizedContent = sanitizeContent(message.content);\n      \n      text += `[${role} - ${timestamp}]\\n`;\n      text += `${sanitizedContent}\\n\\n`;\n      text += \"-\".repeat(80) + \"\\n\\n\";\n    });\n\n    // Copy to clipboard\n    await navigator.clipboard.writeText(text);\n    showToast.success(\"Copied to clipboard!\");\n  } catch (error: any) {\n    console.error(\"Error copying to clipboard:\", error);\n    showToast.error(\"Failed to copy to clipboard\");\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\exportUtilsOptimized.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5042,5045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5042,5045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7338,7341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7338,7341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8707,8710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8707,8710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import jsPDF from \"jspdf\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { toast as showToast } from \"sonner\";\nimport DOMPurify from \"dompurify\";\n\n/**\n * MEDIUM PRIORITY FIX: Optimized export utilities to eliminate N+1 queries\n * Original code made separate fetch calls per conversation in batch exports\n * This version batches all fetches into single queries\n */\n\ninterface Message {\n  id: string;\n  role: string;\n  content: string;\n  created_at: string;\n}\n\ninterface Conversation {\n  id: string;\n  title: string;\n  created_at: string;\n}\n\nconst sanitizeContent = (content: string): string => {\n  return DOMPurify.sanitize(content, { ALLOWED_TAGS: [] });\n};\n\nconst triggerDownload = (blob: Blob, filename: string): void => {\n  const url = URL.createObjectURL(blob);\n  const anchor = document.createElement(\"a\");\n  anchor.href = url;\n  anchor.download = filename;\n  \n  try {\n    document.body.appendChild(anchor);\n    anchor.click();\n  } finally {\n    document.body.removeChild(anchor);\n    URL.revokeObjectURL(url);\n  }\n};\n\n/**\n * OPTIMIZED: Fetch all conversations and messages in bulk (2 queries total)\n * Instead of N+1 queries (1 for conversations, 1 per conversation for messages)\n */\nexport const exportAllConversationsToPDF = async () => {\n  try {\n    showToast.info(\"Generating comprehensive PDF export...\");\n\n    // OPTIMIZATION: Single query for all conversations\n    const { data: conversations, error: convoError } = await supabase\n      .from(\"conversations\")\n      .select(\"id, title, created_at\")\n      .order(\"created_at\", { ascending: false });\n\n    if (convoError) throw convoError;\n    if (!conversations || conversations.length === 0) {\n      showToast.error(\"No conversations to export\");\n      return;\n    }\n\n    const conversationIds = conversations.map(c => c.id);\n\n    // OPTIMIZATION: Single query for ALL messages across ALL conversations\n    const { data: allMessages, error: msgError } = await supabase\n      .from(\"messages\")\n      .select(\"id, conversation_id, role, content, created_at\")\n      .in(\"conversation_id\", conversationIds)\n      .order(\"created_at\", { ascending: true });\n\n    if (msgError) throw msgError;\n\n    // Group messages by conversation_id (in-memory operation, very fast)\n    const messagesByConvo = new Map<string, Message[]>();\n    allMessages?.forEach(msg => {\n      if (!messagesByConvo.has(msg.conversation_id)) {\n        messagesByConvo.set(msg.conversation_id, []);\n      }\n      messagesByConvo.get(msg.conversation_id)!.push(msg);\n    });\n\n    // Create PDF\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n    const margin = 20;\n    const maxWidth = pageWidth - 2 * margin;\n    let y = margin;\n\n    // Title page\n    pdf.setFontSize(20);\n    pdf.setFont(\"helvetica\", \"bold\");\n    pdf.text(\"Complete Conversation History\", margin, y);\n    y += 10;\n\n    pdf.setFontSize(10);\n    pdf.setFont(\"helvetica\", \"normal\");\n    pdf.setTextColor(100);\n    pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, y);\n    pdf.text(`Total Conversations: ${conversations.length}`, margin, y + 5);\n    y += 20;\n\n    pdf.setTextColor(0);\n\n    // Iterate through conversations (no database calls here!)\n    conversations.forEach((convo, index) => {\n      // New page for each conversation\n      if (index > 0) {\n        pdf.addPage();\n        y = margin;\n      }\n\n      // Conversation header\n      pdf.setFontSize(16);\n      pdf.setFont(\"helvetica\", \"bold\");\n      const sanitizedTitle = sanitizeContent(convo.title);\n      pdf.text(sanitizedTitle, margin, y);\n      y += 7;\n\n      pdf.setFontSize(9);\n      pdf.setFont(\"helvetica\", \"normal\");\n      pdf.setTextColor(100);\n      pdf.text(`Created: ${new Date(convo.created_at).toLocaleString()}`, margin, y);\n      y += 10;\n\n      pdf.setTextColor(0);\n\n      // Get messages for this conversation (no query needed!)\n      const messages = messagesByConvo.get(convo.id) || [];\n\n      messages.forEach(message => {\n        if (y > pageHeight - 40) {\n          pdf.addPage();\n          y = margin;\n        }\n\n        pdf.setFontSize(11);\n        pdf.setFont(\"helvetica\", \"bold\");\n        const role = message.role === \"user\" ? \"You\" : \"AI Assistant\";\n        const timestamp = new Date(message.created_at).toLocaleString();\n        pdf.text(`${role} - ${timestamp}`, margin, y);\n        y += 7;\n\n        pdf.setFontSize(10);\n        pdf.setFont(\"helvetica\", \"normal\");\n        const sanitizedContent = sanitizeContent(message.content);\n        const lines = pdf.splitTextToSize(sanitizedContent, maxWidth);\n        \n        lines.forEach((line: string) => {\n          if (y > pageHeight - 20) {\n            pdf.addPage();\n            y = margin;\n          }\n          pdf.text(line, margin, y);\n          y += 5;\n        });\n\n        y += 5;\n      });\n    });\n\n    const fileName = `all_conversations_${Date.now()}.pdf`;\n    pdf.save(fileName);\n    showToast.success(\"All conversations exported successfully!\");\n  } catch (error: any) {\n    console.error(\"Error exporting all conversations:\", error);\n    showToast.error(\"Failed to export conversations\");\n  }\n};\n\n/**\n * OPTIMIZED: Export single conversation (same as before, but with logging)\n */\nexport const exportConversationToPDF = async (conversationId: string, title: string) => {\n  try {\n    showToast.info(\"Generating PDF...\");\n\n    // Fetch messages\n    const { data: messages, error } = await supabase\n      .from(\"messages\")\n      .select(\"*\")\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) throw error;\n\n    // Create PDF\n    const pdf = new jsPDF();\n    const pageWidth = pdf.internal.pageSize.getWidth();\n    const pageHeight = pdf.internal.pageSize.getHeight();\n    const margin = 20;\n    const maxWidth = pageWidth - 2 * margin;\n    let y = margin;\n\n    const sanitizedTitle = sanitizeContent(title);\n    pdf.setFontSize(18);\n    pdf.setFont(\"helvetica\", \"bold\");\n    pdf.text(sanitizedTitle, margin, y);\n    y += 10;\n\n    pdf.setFontSize(10);\n    pdf.setFont(\"helvetica\", \"normal\");\n    pdf.setTextColor(100);\n    pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, y);\n    y += 15;\n\n    pdf.setTextColor(0);\n\n    messages?.forEach((message: Message) => {\n      if (y > pageHeight - 40) {\n        pdf.addPage();\n        y = margin;\n      }\n\n      pdf.setFontSize(11);\n      pdf.setFont(\"helvetica\", \"bold\");\n      const role = message.role === \"user\" ? \"You\" : \"AI Assistant\";\n      const timestamp = new Date(message.created_at).toLocaleString();\n      pdf.text(`${role} - ${timestamp}`, margin, y);\n      y += 7;\n\n      pdf.setFontSize(10);\n      pdf.setFont(\"helvetica\", \"normal\");\n      const sanitizedContent = sanitizeContent(message.content);\n      const lines = pdf.splitTextToSize(sanitizedContent, maxWidth);\n      \n      lines.forEach((line: string) => {\n        if (y > pageHeight - 20) {\n          pdf.addPage();\n          y = margin;\n        }\n        pdf.text(line, margin, y);\n        y += 5;\n      });\n\n      y += 5;\n    });\n\n    const sanitizedFilename = sanitizeContent(title).replace(/[^a-z0-9]/gi, \"_\");\n    const fileName = `${sanitizedFilename}_${Date.now()}.pdf`;\n    pdf.save(fileName);\n    showToast.success(\"PDF downloaded successfully!\");\n  } catch (error: any) {\n    console.error(\"Error exporting to PDF:\", error);\n    showToast.error(\"Failed to export PDF\");\n  }\n};\n\nexport const exportConversationToText = async (conversationId: string, title: string) => {\n  try {\n    const { data: messages, error } = await supabase\n      .from(\"messages\")\n      .select(\"*\")\n      .eq(\"conversation_id\", conversationId)\n      .order(\"created_at\", { ascending: true });\n\n    if (error) throw error;\n\n    const sanitizedTitle = sanitizeContent(title);\n    let content = `${sanitizedTitle}\\n`;\n    content += `Generated: ${new Date().toLocaleString()}\\n`;\n    content += \"=\".repeat(60) + \"\\n\\n\";\n\n    messages?.forEach((message: Message) => {\n      const role = message.role === \"user\" ? \"You\" : \"AI Assistant\";\n      const timestamp = new Date(message.created_at).toLocaleString();\n      const sanitizedContent = sanitizeContent(message.content);\n      \n      content += `[${role}] - ${timestamp}\\n`;\n      content += sanitizedContent + \"\\n\\n\";\n      content += \"-\".repeat(60) + \"\\n\\n\";\n    });\n\n    const blob = new Blob([content], { type: \"text/plain;charset=utf-8\" });\n    const sanitizedFilename = sanitizeContent(title).replace(/[^a-z0-9]/gi, \"_\");\n    const fileName = `${sanitizedFilename}_${Date.now()}.txt`;\n    \n    triggerDownload(blob, fileName);\n    showToast.success(\"Text file downloaded successfully!\");\n  } catch (error: any) {\n    console.error(\"Error exporting to text:\", error);\n    showToast.error(\"Failed to export text file\");\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\fhir.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4487,4490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4487,4490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4587,4590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4587,4590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5016,5019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5016,5019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5617,5620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5617,5620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// FHIR R4 Export Utilities for Clinical Notes\n// Implements FHIR DocumentReference and DiagnosticReport resources\n\ninterface Client {\n  id: string;\n  first_name: string;\n  last_name: string;\n  date_of_birth?: string;\n  external_id?: string;\n}\n\ninterface StructuredNote {\n  id: string;\n  session_date: string;\n  clinical_impression?: string;\n  treatment_plan?: string;\n  goals_progress?: string;\n  safety_assessment?: string;\n  client_perspective?: string;\n  current_status?: string;\n  response_to_interventions?: string;\n  new_issues_presented?: boolean;\n  new_issues_details?: string;\n  next_steps?: string;\n  is_telehealth?: boolean;\n}\n\ninterface FHIRExportOptions {\n  client: Client;\n  note: StructuredNote;\n  practitionerName?: string;\n  organizationName?: string;\n}\n\nexport function generateFHIRDocumentReference(options: FHIRExportOptions) {\n  const { client, note, practitionerName = \"Unknown Provider\", organizationName = \"Mental Health Clinic\" } = options;\n\n  const noteContent = [\n    note.current_status && `Current Status: ${note.current_status}`,\n    note.clinical_impression && `Clinical Impression: ${note.clinical_impression}`,\n    note.goals_progress && `Goals Progress: ${note.goals_progress}`,\n    note.response_to_interventions && `Response to Interventions: ${note.response_to_interventions}`,\n    note.new_issues_presented && note.new_issues_details && `New Issues: ${note.new_issues_details}`,\n    note.safety_assessment && `Safety Assessment: ${note.safety_assessment}`,\n    note.treatment_plan && `Treatment Plan: ${note.treatment_plan}`,\n    note.next_steps && `Next Steps: ${note.next_steps}`,\n    note.client_perspective && `Client Perspective: ${note.client_perspective}`,\n  ].filter(Boolean).join('\\n\\n');\n\n  const documentReference = {\n    resourceType: \"DocumentReference\",\n    id: note.id,\n    meta: {\n      versionId: \"1\",\n      lastUpdated: new Date().toISOString(),\n    },\n    status: \"current\",\n    type: {\n      coding: [\n        {\n          system: \"http://loinc.org\",\n          code: \"11488-4\",\n          display: \"Consult note\"\n        }\n      ],\n      text: \"Mental Health Session Note\"\n    },\n    category: [\n      {\n        coding: [\n          {\n            system: \"http://loinc.org\",\n            code: \"LP173421-1\",\n            display: \"Report\"\n          }\n        ]\n      }\n    ],\n    subject: {\n      reference: `Patient/${client.id}`,\n      display: `${client.first_name} ${client.last_name}`\n    },\n    date: new Date(note.session_date).toISOString(),\n    author: [\n      {\n        display: practitionerName\n      }\n    ],\n    custodian: {\n      display: organizationName\n    },\n    content: [\n      {\n        attachment: {\n          contentType: \"text/plain\",\n          data: btoa(noteContent),\n          title: `Mental Health Session Note - ${new Date(note.session_date).toLocaleDateString()}`\n        }\n      }\n    ],\n    context: {\n      event: [\n        {\n          coding: [\n            {\n              system: \"http://snomed.info/sct\",\n              code: \"108313002\",\n              display: \"Psychiatric interview and evaluation\"\n            }\n          ]\n        }\n      ],\n      period: {\n        start: new Date(note.session_date).toISOString()\n      },\n      facilityType: {\n        coding: [\n          {\n            system: \"http://terminology.hl7.org/CodeSystem/v3-RoleCode\",\n            code: note.is_telehealth ? \"CVDX\" : \"HOSP\",\n            display: note.is_telehealth ? \"Telemedicine\" : \"Hospital\"\n          }\n        ]\n      }\n    }\n  };\n\n  return documentReference;\n}\n\nexport function generateFHIRBundle(options: FHIRExportOptions) {\n  const { client, note } = options;\n  \n  const documentReference = generateFHIRDocumentReference(options);\n  \n  const patient = {\n    resourceType: \"Patient\",\n    id: client.id,\n    identifier: client.external_id ? [\n      {\n        system: \"http://example.org/patient-ids\",\n        value: client.external_id\n      }\n    ] : [],\n    name: [\n      {\n        use: \"official\",\n        family: client.last_name,\n        given: [client.first_name]\n      }\n    ],\n    birthDate: client.date_of_birth\n  };\n\n  const bundle = {\n    resourceType: \"Bundle\",\n    type: \"document\",\n    timestamp: new Date().toISOString(),\n    entry: [\n      {\n        fullUrl: `Patient/${client.id}`,\n        resource: patient\n      },\n      {\n        fullUrl: `DocumentReference/${note.id}`,\n        resource: documentReference\n      }\n    ]\n  };\n\n  return bundle;\n}\n\nexport function exportFHIRAsJSON(bundle: any): string {\n  return JSON.stringify(bundle, null, 2);\n}\n\nexport function exportFHIRAsXML(bundle: any): string {\n  // Simple XML conversion - for production, use a proper FHIR library\n  const escapeXml = (str: string) => {\n    return str.replace(/[<>&'\"]/g, (c) => {\n      switch (c) {\n        case '<': return '&lt;';\n        case '>': return '&gt;';\n        case '&': return '&amp;';\n        case \"'\": return '&apos;';\n        case '\"': return '&quot;';\n        default: return c;\n      }\n    });\n  };\n\n  const toXML = (obj: any, rootName: string = 'root'): string => {\n    if (typeof obj !== 'object' || obj === null) {\n      return `<${rootName}>${escapeXml(String(obj))}</${rootName}>`;\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(item => toXML(item, rootName)).join('');\n    }\n\n    const entries = Object.entries(obj);\n    const childElements = entries\n      .map(([key, value]) => toXML(value, key))\n      .join('');\n\n    return `<${rootName}>${childElements}</${rootName}>`;\n  };\n\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n${toXML(bundle, 'Bundle')}`;\n}\n\nexport function downloadFHIRBundle(bundle: any, format: 'json' | 'xml' = 'json', filename?: string) {\n  const content = format === 'json' \n    ? exportFHIRAsJSON(bundle)\n    : exportFHIRAsXML(bundle);\n  \n  const blob = new Blob([content], { \n    type: format === 'json' ? 'application/fhir+json' : 'application/fhir+xml' \n  });\n  \n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename || `fhir-bundle-${Date.now()}.${format}`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\fileUpload.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1240,1243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1240,1243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3459,3462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3459,3462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4227,4230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4227,4230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4750,4753],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4750,4753],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":176,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5337,5340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5337,5340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\r\nimport { toast } from \"sonner\";\r\nimport * as pdfjsLib from \"pdfjs-dist\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\r\n\r\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\r\nconst PDF_MAGIC_BYTES = [0x25, 0x50, 0x44, 0x46]; // %PDF\r\n\r\ninterface UploadedFile {\r\n  id: string;\r\n  file_name: string;\r\n  file_type: string;\r\n  file_url: string;\r\n  processed_content: string;\r\n}\r\n\r\nconst verifyPDFMagicBytes = async (file: File): Promise<boolean> => {\r\n  const buffer = await file.slice(0, 4).arrayBuffer();\r\n  const bytes = new Uint8Array(buffer);\r\n  return PDF_MAGIC_BYTES.every((byte, index) => bytes[index] === byte);\r\n};\r\n\r\nexport const extractTextFromPDF = async (file: File): Promise<string> => {\r\n  try {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\r\n    let fullText = \"\";\r\n\r\n    for (let i = 1; i <= pdf.numPages; i++) {\r\n      const page = await pdf.getPage(i);\r\n      const textContent = await page.getTextContent();\r\n      const pageText = textContent.items\r\n        .map((item: any) => item.str)\r\n        .join(\" \");\r\n      fullText += pageText + \"\\n\\n\";\r\n    }\r\n\r\n    return fullText.trim();\r\n  } catch (error) {\r\n    console.error(\"Error extracting text from PDF:\", error);\r\n    throw new Error(\"Failed to extract text from PDF\");\r\n  }\r\n};\r\n\r\nexport const extractTextFromFile = async (file: File): Promise<string> => {\r\n  if (file.size > MAX_FILE_SIZE) {\r\n    throw new Error(`File size exceeds maximum allowed size of 10MB`);\r\n  }\r\n\r\n  if (file.type === \"application/pdf\") {\r\n    const isValidPDF = await verifyPDFMagicBytes(file);\r\n    if (!isValidPDF) {\r\n      throw new Error(\"Invalid PDF file format\");\r\n    }\r\n    const rawText = await extractTextFromPDF(file);\r\n    return DOMPurify.sanitize(rawText, { ALLOWED_TAGS: [] });\r\n  } else if (file.type === \"text/plain\" || file.name.endsWith(\".txt\")) {\r\n    const rawText = await file.text();\r\n    return DOMPurify.sanitize(rawText, { ALLOWED_TAGS: [] });\r\n  } else {\r\n    throw new Error(\"Unsupported file type\");\r\n  }\r\n};\r\n\r\nexport const uploadFileToStorage = async (\r\n  file: File,\r\n  conversationId: string\r\n): Promise<{ url: string; path: string } | null> => {\r\n  try {\r\n    const { data: { user } } = await supabase.auth.getUser();\r\n    if (!user) throw new Error(\"User not authenticated\");\r\n\r\n    if (![\"application/pdf\", \"text/plain\"].includes(file.type)) {\r\n      throw new Error(\"Only PDF and text files are allowed\");\r\n    }\r\n\r\n    const fileExt = file.name.split(\".\").pop();\r\n    const fileName = `${user.id}/${conversationId}/${Date.now()}.${fileExt}`;\r\n\r\n    const fd = new FormData();\r\n    fd.append(\"file\", file);\r\n    fd.append(\"path\", fileName);\r\n\r\n    const res = await fetch(\"/functions/v1/storage-upload-guard\", {\r\n      method: \"POST\",\r\n      body: fd,\r\n    });\r\n\r\n    const payload = await res.json().catch(() => ({}));\r\n    if (!res.ok) {\r\n      throw new Error(typeof payload?.error === \"string\" ? payload.error : await res.text());\r\n    }\r\n\r\n    const { data: signedData, error: signedError } = await supabase.storage\r\n      .from(\"clinical-documents\")\r\n      .createSignedUrl(fileName, 3600);\r\n\r\n    if (signedError) throw signedError;\r\n\r\n    return { url: signedData.signedUrl, path: fileName };\r\n  } catch (error: any) {\r\n    console.error(\"Error uploading file:\", error);\r\n    toast.error(error.message || \"Failed to upload file\");\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const saveFileMetadata = async (\r\n  conversationId: string,\r\n  fileName: string,\r\n  fileType: string,\r\n  fileUrl: string,\r\n  processedContent: string\r\n): Promise<string | null> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"uploaded_files\")\r\n      .insert([\r\n        {\r\n          conversation_id: conversationId,\r\n          file_name: fileName,\r\n          file_type: fileType,\r\n          file_url: fileUrl,\r\n          processed_content: processedContent,\r\n        },\r\n      ])\r\n      .select(\"id\")\r\n      .single();\r\n\r\n    if (error) throw error;\r\n    return data.id;\r\n  } catch (error: any) {\r\n    console.error(\"Error saving file metadata:\", error);\r\n    toast.error(\"Failed to save file metadata\");\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const getConversationFiles = async (\r\n  conversationId: string\r\n): Promise<UploadedFile[]> => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from(\"uploaded_files\")\r\n      .select(\"*\")\r\n      .eq(\"conversation_id\", conversationId)\r\n      .order(\"created_at\", { ascending: false });\r\n\r\n    if (error) throw error;\r\n    return data || [];\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching files:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const deleteFile = async (fileId: string, filePath: string): Promise<boolean> => {\r\n  try {\r\n    const { error: storageError } = await supabase.storage\r\n      .from(\"clinical-documents\")\r\n      .remove([filePath]);\r\n\r\n    if (storageError) throw storageError;\r\n\r\n    const { error: dbError } = await supabase\r\n      .from(\"uploaded_files\")\r\n      .delete()\r\n      .eq(\"id\", fileId);\r\n\r\n    if (dbError) throw dbError;\r\n\r\n    toast.success(\"File deleted\");\r\n    return true;\r\n  } catch (error: any) {\r\n    console.error(\"Error deleting file:\", error);\r\n    toast.error(\"Failed to delete file\");\r\n    return false;\r\n  }\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\openai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3328,3331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3328,3331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\nconst MAX_NOTE_LENGTH = 50000; // ~10,000 words\nconst MAX_FILE_LENGTH = 100000;\n\ninterface AnalyzeNotesParams {\n  notes: string;\n  action: \"soap_note\" | \"session_summary\" | \"key_points\" | \"progress_report\" | \"edit_content\";\n  fileContent?: string;\n  conversationHistory?: Array<{ role: string; content: string }>;\n  editInstruction?: string;\n  originalContent?: string;\n  onChunk: (text: string) => void;\n  onComplete: () => void;\n  onError: (error: string) => void;\n}\n\nexport const analyzeNotesStreaming = async ({\n  notes,\n  action,\n  fileContent,\n  conversationHistory,\n  editInstruction,\n  originalContent,\n  onChunk,\n  onComplete,\n  onError,\n}: AnalyzeNotesParams) => {\n  try {\n    // Validate input lengths\n    if (notes.length > MAX_NOTE_LENGTH) {\n      onError(\"Clinical note is too long. Please limit to 10,000 words.\");\n      return;\n    }\n\n    if (fileContent && fileContent.length > MAX_FILE_LENGTH) {\n      onError(\"Uploaded file content is too long. Please use smaller files.\");\n      return;\n    }\n\n    // Sanitize notes - remove potentially harmful content\n    const sanitizedNotes = notes.trim();\n    const sanitizedFile = fileContent?.trim();\n\n    const { data: { session } } = await supabase.auth.getSession();\n    if (!session) {\n      throw new Error(\"User not authenticated\");\n    }\n\n    const response = await fetch(\n      `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/analyze-clinical-notes`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${session.access_token}`,\n        },\n        body: JSON.stringify({\n          notes: sanitizedNotes,\n          action,\n          file_content: sanitizedFile,\n          conversation_history: conversationHistory,\n          edit_instruction: editInstruction,\n          original_content: originalContent,\n        }),\n      }\n    );\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      // Avoid exposing internal error details in production\n      const errorMessage = response.status >= 500 \n        ? \"Service temporarily unavailable. Please try again.\" \n        : (errorData.error || \"Failed to process request\");\n      throw new Error(errorMessage);\n    }\n\n    if (!response.body) {\n      throw new Error(\"No response body\");\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = \"\";\n\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n\n      buffer += decoder.decode(value, { stream: true });\n      const lines = buffer.split(\"\\n\");\n      buffer = lines.pop() || \"\";\n\n      for (const line of lines) {\n        if (line.startsWith(\"data: \")) {\n          const data = line.slice(6);\n          \n          if (data === \"[DONE]\") {\n            onComplete();\n            return;\n          }\n\n          try {\n            const parsed = JSON.parse(data);\n            const content = parsed.choices?.[0]?.delta?.content;\n            if (content) {\n              onChunk(content);\n            }\n          } catch (e) {\n            // Skip malformed JSON\n            console.warn(\"Failed to parse SSE data:\", e);\n          }\n        }\n      }\n    }\n\n    onComplete();\n  } catch (error: any) {\n    // Log error internally but don't expose details to user in production\n    console.error(\"Error analyzing notes:\", error);\n    const userMessage = error.message?.includes(\"authenticated\") \n      ? \"Session expired. Please sign in again.\"\n      : error.message?.includes(\"too long\")\n      ? error.message\n      : \"Failed to analyze notes. Please try again.\";\n    onError(userMessage);\n  }\n};\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\passwordSecurity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\rateLimiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\signedUrls.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\Auth.tsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\[.","line":25,"column":29,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":25,"endColumn":30,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1160,1161],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1160,1160],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":25,"column":46,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":25,"endColumn":47,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1177,1178],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1177,1177],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3292,3295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3292,3295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4803,4806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4803,4806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5979,5982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5979,5982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8023,8026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8023,8026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":282,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":282,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9742,9745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9742,9745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { Brain } from \"lucide-react\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { toast } from \"sonner\";\r\nimport { z } from \"zod\";\r\n\r\nconst authSchema = z.object({\r\n  email: z.string()\r\n    .email(\"Invalid email address\")\r\n    .max(255, \"Email must be less than 255 characters\")\r\n    .trim()\r\n    .toLowerCase(),\r\n  password: z.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(128, \"Password must be less than 128 characters\")\r\n    .regex(/[A-Z]/, \"Password must contain at least one uppercase letter\")\r\n    .regex(/[a-z]/, \"Password must contain at least one lowercase letter\")\r\n    .regex(/[0-9]/, \"Password must contain at least one number\")\r\n    .regex(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/, \"Password must contain at least one special character\")\r\n});\r\n\r\nconst Auth = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [mfaCode, setMfaCode] = useState(\"\");\r\n  const [isMfaRequired, setIsMfaRequired] = useState(false);\r\n  const [showResetRequest, setShowResetRequest] = useState(false);\r\n  const [resetEmail, setResetEmail] = useState(\"\");\r\n  const [resetMessage, setResetMessage] = useState<string | null>(null);\r\n  const [resetError, setResetError] = useState<string | null>(null);\r\n  const [resetSubmitting, setResetSubmitting] = useState(false);\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [isResetStage, setIsResetStage] = useState(false);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(location.search);\r\n    const stageParam = params.get(\"stage\") === \"reset\";\r\n    const hash = location.hash || \"\";\r\n    const hashIndicatesRecovery = hash.includes(\"type=recovery\") || hash.includes(\"access_token\");\r\n    setIsResetStage(stageParam || hashIndicatesRecovery);\r\n  }, [location.search, location.hash]);\r\n\r\n  const strongPassword = (pw: string) =>\r\n    typeof pw === \"string\" &&\r\n    pw.length >= 12 &&\r\n    /[A-Z]/.test(pw) &&\r\n    /[a-z]/.test(pw) &&\r\n    /[0-9]/.test(pw) &&\r\n    /[^A-Za-z0-9]/.test(pw);\r\n\r\n  const handleResetRequest = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setResetSubmitting(true);\r\n    setResetError(null);\r\n    setResetMessage(null);\r\n    try {\r\n      const redirectTo = `${window.location.origin}/auth?stage=reset`;\r\n      const { error } = await supabase.auth.resetPasswordForEmail(resetEmail.trim(), { redirectTo });\r\n      if (error) {\r\n        throw error;\r\n      }\r\n      setResetMessage(\"Password reset link sent. Check your email to continue.\");\r\n      toast.success(\"Password reset email sent.\");\r\n      setTimeout(() => {\r\n        setShowResetRequest(false);\r\n        setResetEmail(\"\");\r\n      }, 2000);\r\n    } catch (error: any) {\r\n      const message = typeof error?.message === \"string\" ? error.message : \"Failed to send reset email\";\r\n      setResetError(message);\r\n      toast.error(message);\r\n    } finally {\r\n      setResetSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordReset = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setResetSubmitting(true);\r\n    setResetError(null);\r\n    setResetMessage(null);\r\n\r\n    if (!strongPassword(newPassword)) {\r\n      setResetSubmitting(false);\r\n      setResetError(\"Weak password (min 12 chars with upper, lower, number, special).\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = (await supabase.auth.getSession()).data.session?.access_token;\r\n      if (!token) {\r\n        throw new Error(\"Missing session. Open the reset link from your email.\");\r\n      }\r\n      const response = await fetch(\"/functions/v1/password-reset\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ newPassword }),\r\n      });\r\n      const json = await response.json().catch(() => ({}));\r\n      if (!response.ok) {\r\n        throw new Error(json?.error || \"Password reset failed\");\r\n      }\r\n      setResetMessage(\"Password updated. Please sign in with your new password.\");\r\n      toast.success(\"Password updated. Please sign in with your new password.\");\r\n      setNewPassword(\"\");\r\n      navigate(\"/auth\", { replace: true });\r\n    } catch (error: any) {\r\n      const message = typeof error?.message === \"string\" ? error.message : \"Password reset failed\";\r\n      setResetError(message);\r\n      toast.error(message);\r\n    } finally {\r\n      setResetSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleSignUp = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // Validate inputs\r\n    const validation = authSchema.safeParse({ email, password });\r\n    if (!validation.success) {\r\n      toast.error(validation.error.errors[0].message);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Call secure-signup edge function with server-side HIBP enforcement\r\n      const { data, error } = await supabase.functions.invoke('secure-signup', {\r\n        body: {\r\n          email: validation.data.email,\r\n          password: validation.data.password,\r\n        },\r\n      });\r\n\r\n      if (error) throw error;\r\n      \r\n      if (data?.error) {\r\n        toast.error(data.error);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      toast.success(data.message || \"Account created! You can now sign in.\");\r\n      \r\n      // Clear password field for security\r\n      setPassword(\"\");\r\n    } catch (error: any) {\r\n      const msg = typeof error?.message === 'string' ? error.message : '';\r\n      if (msg.includes('non-2xx') || msg.includes('429')) {\r\n        toast.error(\"Too many signup attempts from your network. Please wait ~15 minutes and try again.\");\r\n      } else {\r\n        toast.error(msg || \"Failed to create account\");\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSignIn = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // Validate inputs\r\n    const validation = authSchema.safeParse({ email, password });\r\n    if (!validation.success) {\r\n      toast.error(validation.error.errors[0].message);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Check account lockout before attempting sign in\r\n      const { data: lockoutCheck } = await supabase.rpc('is_account_locked', {\r\n        _identifier: validation.data.email\r\n      });\r\n\r\n      if (lockoutCheck) {\r\n        toast.error(\"Account temporarily locked due to multiple failed login attempts. Please try again in 15 minutes.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email: validation.data.email,\r\n        password: validation.data.password,\r\n      });\r\n\r\n      if (error) {\r\n        // Record failed login attempt\r\n        await supabase.rpc('record_failed_login', {\r\n          _user_id: null,\r\n          _email: validation.data.email,\r\n          _ip_address: 'unknown'\r\n        });\r\n        \r\n        throw error;\r\n      }\r\n\r\n      // Check if MFA is required\r\n      if (data?.user && !data.session) {\r\n        setIsMfaRequired(true);\r\n        toast.info(\"Please enter your authentication code\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Clear failed login attempts on successful sign in\r\n      await supabase.rpc('clear_failed_logins', {\r\n        _identifier: validation.data.email\r\n      });\r\n\r\n      toast.success(\"Signed in successfully!\");\r\n      navigate(\"/\");\r\n    } catch (error: any) {\r\n      toast.error(error.message || \"Failed to sign in\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleMfaVerify = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // Validate MFA code format\r\n    if (!mfaCode || mfaCode.length !== 6 || !/^\\d{6}$/.test(mfaCode)) {\r\n      toast.error(\"Please enter a valid 6-digit authentication code\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Use challenge and verify for MFA\r\n      const { data } = await supabase.auth.mfa.listFactors();\r\n      const factorId = data?.all?.[0]?.id;\r\n      \r\n      if (!factorId) {\r\n        toast.error(\"Multi-factor authentication is not set up for this account. Please contact support.\");\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase.auth.mfa.challengeAndVerify({\r\n        factorId,\r\n        code: mfaCode\r\n      });\r\n\r\n      if (error) {\r\n        // Provide user-friendly error messages\r\n        if (error.message.includes(\"expired\")) {\r\n          toast.error(\"Authentication code has expired. Please try again with a new code.\");\r\n        } else if (error.message.includes(\"invalid\")) {\r\n          toast.error(\"Invalid authentication code. Please check your authenticator app and try again.\");\r\n        } else {\r\n          toast.error(error.message || \"Failed to verify authentication code\");\r\n        }\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Clear failed login attempts on successful MFA\r\n      await supabase.rpc('clear_failed_logins', {\r\n        _identifier: email\r\n      });\r\n\r\n      toast.success(\"Authentication successful! Welcome back.\");\r\n      navigate(\"/\");\r\n    } catch (error: any) {\r\n      console.error(\"MFA verification error:\", error);\r\n      toast.error(\"An unexpected error occurred. Please try again or contact support.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (isResetStage) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-secondary/30 to-background p-4\">\r\n        <Card className=\"w-full max-w-md shadow-lg border-border/50\">\r\n          <CardHeader className=\"space-y-4 text-center\">\r\n            <div className=\"mx-auto w-16 h-16 rounded-2xl bg-gradient-to-br from-primary to-accent flex items-center justify-center shadow-md\">\r\n              <Brain className=\"w-10 h-10 text-white\" />\r\n            </div>\r\n            <div>\r\n              <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n              <CardDescription className=\"mt-2\">\r\n                Choose a strong password with upper, lower, number, and special characters.\r\n              </CardDescription>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <form onSubmit={handlePasswordReset} className=\"space-y-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"new-password\">New Password</Label>\r\n                <Input\r\n                  id=\"new-password\"\r\n                  type=\"password\"\r\n                  minLength={12}\r\n                  placeholder=\"New strong password\"\r\n                  value={newPassword}\r\n                  onChange={(e) => setNewPassword(e.target.value)}\r\n                  required\r\n                />\r\n              </div>\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"w-full bg-primary hover:bg-primary/90 transition-all\"\r\n                disabled={resetSubmitting}\r\n              >\r\n                {resetSubmitting ? \"Updating...\" : \"Update Password\"}\r\n              </Button>\r\n              {resetError && <p className=\"text-sm text-destructive\">{resetError}</p>}\r\n              {resetMessage && <p className=\"text-sm text-emerald-600\">{resetMessage}</p>}\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                className=\"w-full\"\r\n                onClick={() => {\r\n                  setIsResetStage(false);\r\n                  navigate(\"/auth\", { replace: true });\r\n                }}\r\n              >\r\n                Back to Sign In\r\n              </Button>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-secondary/30 to-background p-4\">\r\n      <Card className=\"w-full max-w-md shadow-lg border-border/50\">\r\n        <CardHeader className=\"space-y-4 text-center\">\r\n          <div className=\"mx-auto w-16 h-16 rounded-2xl bg-gradient-to-br from-primary to-accent flex items-center justify-center shadow-md\">\r\n            <Brain className=\"w-10 h-10 text-white\" />\r\n          </div>\r\n          <div>\r\n            <CardTitle className=\"text-2xl\">ClinicalAI Assistant</CardTitle>\r\n            <CardDescription className=\"mt-2\">\r\n              Mental health clinical documentation made simple\r\n            </CardDescription>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"signin\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\r\n              <TabsTrigger value=\"signin\">Sign In</TabsTrigger>\r\n              <TabsTrigger value=\"signup\">Sign Up</TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"signin\">\r\n              {isMfaRequired ? (\r\n                <form onSubmit={handleMfaVerify} className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"mfa-code\">\r\n                      Authentication Code\r\n                      <span className=\"sr-only\"> (6 digits from your authenticator app)</span>\r\n                    </Label>\r\n                    <Input\r\n                      id=\"mfa-code\"\r\n                      type=\"text\"\r\n                      inputMode=\"numeric\"\r\n                      pattern=\"\\d{6}\"\r\n                      placeholder=\"000000\"\r\n                      value={mfaCode}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value.replace(/\\D/g, \"\");\r\n                        setMfaCode(value.slice(0, 6));\r\n                      }}\r\n                      maxLength={6}\r\n                      required\r\n                      autoComplete=\"one-time-code\"\r\n                      autoFocus\r\n                      aria-describedby=\"mfa-code-description\"\r\n                      className=\"text-center text-lg tracking-widest\"\r\n                    />\r\n                    <p id=\"mfa-code-description\" className=\"text-sm text-muted-foreground\">\r\n                      Enter the 6-digit code from your authenticator app (e.g., Google Authenticator, Authy)\r\n                    </p>\r\n                  </div>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"w-full bg-primary hover:bg-primary/90 transition-all\"\r\n                    disabled={loading || mfaCode.length !== 6}\r\n                    aria-label={loading ? \"Verifying authentication code\" : \"Verify authentication code\"}\r\n                  >\r\n                    {loading ? (\r\n                      <>\r\n                        <span className=\"inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" aria-hidden=\"true\" />\r\n                        Verifying...\r\n                      </>\r\n                    ) : (\r\n                      \"Verify Code\"\r\n                    )}\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    className=\"w-full\"\r\n                    onClick={() => {\r\n                      setIsMfaRequired(false);\r\n                      setMfaCode(\"\");\r\n                    }}\r\n                    disabled={loading}\r\n                    aria-label=\"Go back to sign in\"\r\n                  >\r\n                    Back to Sign In\r\n                  </Button>\r\n                </form>\r\n              ) : showResetRequest ? (\r\n                <form onSubmit={handleResetRequest} className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"reset-email\">Email</Label>\r\n                    <Input\r\n                      id=\"reset-email\"\r\n                      type=\"email\"\r\n                      placeholder=\"your.email@example.com\"\r\n                      value={resetEmail}\r\n                      onChange={(e) => setResetEmail(e.target.value)}\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"w-full bg-primary hover:bg-primary/90 transition-all\"\r\n                    disabled={resetSubmitting}\r\n                  >\r\n                    {resetSubmitting ? \"Sending link...\" : \"Send reset link\"}\r\n                  </Button>\r\n                  {resetError && <p className=\"text-sm text-destructive\">{resetError}</p>}\r\n                  {resetMessage && <p className=\"text-sm text-emerald-600\">{resetMessage}</p>}\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    className=\"w-full\"\r\n                    onClick={() => {\r\n                      setShowResetRequest(false);\r\n                      setResetEmail(\"\");\r\n                      setResetError(null);\r\n                      setResetMessage(null);\r\n                    }}\r\n                  >\r\n                    Back to sign in\r\n                  </Button>\r\n                </form>\r\n              ) : (\r\n                <form onSubmit={handleSignIn} className=\"space-y-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"signin-email\">Email</Label>\r\n                    <Input\r\n                      id=\"signin-email\"\r\n                      type=\"email\"\r\n                      placeholder=\"your.email@example.com\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                      required\r\n                      className=\"transition-all\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"signin-password\">Password</Label>\r\n                    <Input\r\n                      id=\"signin-password\"\r\n                      type=\"password\"\r\n                      placeholder=\"••••••••\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      required\r\n                      className=\"transition-all\"\r\n                    />\r\n                  </div>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\"w-full bg-primary hover:bg-primary/90 transition-all\"\r\n                    disabled={loading}\r\n                  >\r\n                    {loading ? \"Signing in...\" : \"Sign In\"}\r\n                  </Button>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"link\"\r\n                    className=\"w-full mt-2\"\r\n                    onClick={() => {\r\n                      setShowResetRequest(true);\r\n                      setResetError(null);\r\n                      setResetMessage(null);\r\n                    }}\r\n                  >\r\n                    Forgot your password?\r\n                  </Button>\r\n                </form>\r\n              )}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"signup\">\r\n              <form onSubmit={handleSignUp} className=\"space-y-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"signup-email\">Email</Label>\r\n                  <Input\r\n                    id=\"signup-email\"\r\n                    type=\"email\"\r\n                    placeholder=\"your.email@example.com\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    required\r\n                    className=\"transition-all\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"signup-password\">Password</Label>\r\n                  <Input\r\n                    id=\"signup-password\"\r\n                    type=\"password\"\r\n                    placeholder=\"••••••••\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    required\r\n                    minLength={6}\r\n                    className=\"transition-all\"\r\n                  />\r\n                </div>\r\n                <Button\r\n                  type=\"submit\"\r\n                  className=\"w-full bg-primary hover:bg-primary/90 transition-all\"\r\n                  disabled={loading}\r\n                >\r\n                  {loading ? \"Creating account...\" : \"Create Account\"}\r\n                </Button>\r\n              </form>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\ClientProfile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\Clients.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\History.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\SecurityMonitoring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\SecuritySettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2317,2320],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2317,2320],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3046,3049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3046,3049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3518,3521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3518,3521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\";\nimport { supabase } from \"@/integrations/supabase/client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { toast } from \"sonner\";\nimport { Shield, Key, Download } from \"lucide-react\";\nimport QRCode from \"qrcode\";\n\nconst SecuritySettings = () => {\n  const [isMfaEnrolled, setIsMfaEnrolled] = useState(false);\n  const [qrCode, setQrCode] = useState<string>(\"\");\n  const [secret, setSecret] = useState<string>(\"\");\n  const [verifyCode, setVerifyCode] = useState(\"\");\n  const [recoveryCodes, setRecoveryCodes] = useState<string[]>([]);\n  const [isEnrolling, setIsEnrolling] = useState(false);\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  useEffect(() => {\n    checkMfaStatus();\n  }, []);\n\n  const checkMfaStatus = async () => {\n    try {\n      const { data } = await supabase.auth.mfa.listFactors();\n      setIsMfaEnrolled(data && data.all && data.all.length > 0);\n    } catch (error) {\n      console.error(\"Error checking MFA status:\", error);\n    }\n  };\n\n  const enrollMfa = async () => {\n    setIsEnrolling(true);\n    try {\n      const { data, error } = await supabase.auth.mfa.enroll({\n        factorType: 'totp',\n      });\n\n      if (error) throw error;\n\n      if (data) {\n        setSecret(data.totp.secret);\n        \n        // Generate QR code\n        const qrCodeUrl = data.totp.qr_code;\n        const qrCodeDataUrl = await QRCode.toDataURL(qrCodeUrl);\n        setQrCode(qrCodeDataUrl);\n\n        // Generate recovery codes\n        const codes = Array.from({ length: 10 }, () => \n          Math.random().toString(36).substring(2, 10).toUpperCase()\n        );\n        setRecoveryCodes(codes);\n\n        // Store hashed recovery codes in database\n        const { data: { user } } = await supabase.auth.getUser();\n        if (user) {\n          for (const code of codes) {\n            await supabase.from('mfa_recovery_codes').insert({\n              user_id: user.id,\n              code_hash: await hashCode(code)\n            });\n          }\n        }\n\n        toast.success(\"MFA enrollment started. Please scan the QR code.\");\n      }\n    } catch (error: any) {\n      toast.error(error.message);\n    } finally {\n      setIsEnrolling(false);\n    }\n  };\n\n  const verifyAndEnableMfa = async () => {\n    setIsVerifying(true);\n    try {\n      const { data } = await supabase.auth.mfa.listFactors();\n      const factorId = data?.all?.[0]?.id;\n\n      if (!factorId) {\n        toast.error(\"No MFA factor found. Please start enrollment again.\");\n        return;\n      }\n\n      const { error } = await supabase.auth.mfa.challengeAndVerify({\n        factorId,\n        code: verifyCode,\n      });\n\n      if (error) throw error;\n\n      setIsMfaEnrolled(true);\n      setQrCode(\"\");\n      setSecret(\"\");\n      setVerifyCode(\"\");\n      toast.success(\"MFA successfully enabled!\");\n    } catch (error: any) {\n      toast.error(error.message);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const unenrollMfa = async () => {\n    try {\n      const { data } = await supabase.auth.mfa.listFactors();\n      const factorId = data?.all?.[0]?.id;\n\n      if (!factorId) return;\n\n      const { error } = await supabase.auth.mfa.unenroll({ factorId });\n\n      if (error) throw error;\n\n      setIsMfaEnrolled(false);\n      toast.success(\"MFA disabled\");\n    } catch (error: any) {\n      toast.error(error.message);\n    }\n  };\n\n  const hashCode = async (code: string): Promise<string> => {\n    // Note: Actual hashing now happens server-side with salt via trigger\n    // This is just for display purposes - we store plaintext temporarily\n    // and the database trigger will hash it properly with salt\n    return code;\n  };\n\n  const downloadRecoveryCodes = () => {\n    const blob = new Blob([recoveryCodes.join('\\n')], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'mfa-recovery-codes.txt';\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container max-w-4xl py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Security Settings</h1>\n      \n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"h-5 w-5\" />\n            Multi-Factor Authentication (MFA)\n          </CardTitle>\n          <CardDescription>\n            Add an extra layer of security to your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {!isMfaEnrolled && !qrCode && (\n            <div>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Enable MFA to protect your account with time-based one-time passwords (TOTP).\n              </p>\n              <Button onClick={enrollMfa} disabled={isEnrolling}>\n                {isEnrolling ? \"Enrolling...\" : \"Enable MFA\"}\n              </Button>\n            </div>\n          )}\n\n          {qrCode && (\n            <div className=\"space-y-4\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <img src={qrCode} alt=\"MFA QR Code\" className=\"w-64 h-64\" />\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium mb-2\">Secret Key (manual entry):</p>\n                  <code className=\"bg-muted px-3 py-1 rounded text-sm\">{secret}</code>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"verify-code\">Enter verification code</Label>\n                <Input\n                  id=\"verify-code\"\n                  type=\"text\"\n                  placeholder=\"Enter 6-digit code\"\n                  value={verifyCode}\n                  onChange={(e) => setVerifyCode(e.target.value)}\n                  maxLength={6}\n                />\n              </div>\n\n              <Button onClick={verifyAndEnableMfa} disabled={isVerifying || verifyCode.length !== 6}>\n                {isVerifying ? \"Verifying...\" : \"Verify and Enable\"}\n              </Button>\n\n              {recoveryCodes.length > 0 && (\n                <Card className=\"bg-amber-50 dark:bg-amber-950 border-amber-200 dark:border-amber-800\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-lg\">\n                      <Key className=\"h-4 w-4\" />\n                      Recovery Codes\n                    </CardTitle>\n                    <CardDescription>\n                      Save these codes in a secure location. Each code can be used once if you lose access to your authenticator.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-2 mb-4 font-mono text-sm\">\n                      {recoveryCodes.map((code, i) => (\n                        <div key={i} className=\"bg-background px-3 py-2 rounded border\">\n                          {code}\n                        </div>\n                      ))}\n                    </div>\n                    <Button onClick={downloadRecoveryCodes} variant=\"outline\" size=\"sm\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download Recovery Codes\n                    </Button>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n\n          {isMfaEnrolled && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400\">\n                <Shield className=\"h-5 w-5\" />\n                <span className=\"font-medium\">MFA is enabled</span>\n              </div>\n              <Button onClick={unenrollMfa} variant=\"destructive\">\n                Disable MFA\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default SecuritySettings;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\pages\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\test\\setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":6,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":9,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[747,750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[747,750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { cleanup } from '@testing-library/react';\nimport { afterEach, vi } from 'vitest';\n\n// Cleanup after each test\nafterEach(() => {\n  cleanup();\n});\n\n// Mock window.matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation((query) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(),\n    removeListener: vi.fn(),\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {}\n  disconnect() {}\n  observe() {}\n  takeRecords() {\n    return [];\n  }\n  unobserve() {}\n} as any;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\utils\\RealtimeAudio.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":181,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":181,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5333,5336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5333,5336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\n\nexport class AudioRecorder {\n  private stream: MediaStream | null = null;\n  private audioContext: AudioContext | null = null;\n  private processor: ScriptProcessorNode | null = null;\n  private source: MediaStreamAudioSourceNode | null = null;\n\n  constructor(private onAudioData: (audioData: Float32Array) => void) {}\n\n  async start() {\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 24000,\n          channelCount: 1,\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true\n        }\n      });\n      \n      this.audioContext = new AudioContext({\n        sampleRate: 24000,\n      });\n      \n      this.source = this.audioContext.createMediaStreamSource(this.stream);\n      this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);\n      \n      this.processor.onaudioprocess = (e) => {\n        const inputData = e.inputBuffer.getChannelData(0);\n        this.onAudioData(new Float32Array(inputData));\n      };\n      \n      this.source.connect(this.processor);\n      this.processor.connect(this.audioContext.destination);\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      throw error;\n    }\n  }\n\n  stop() {\n    if (this.source) {\n      this.source.disconnect();\n      this.source = null;\n    }\n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n    if (this.stream) {\n      this.stream.getTracks().forEach(track => track.stop());\n      this.stream = null;\n    }\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\nexport const encodeAudioForAPI = (float32Array: Float32Array): string => {\n  const int16Array = new Int16Array(float32Array.length);\n  for (let i = 0; i < float32Array.length; i++) {\n    const s = Math.max(-1, Math.min(1, float32Array[i]));\n    int16Array[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n  }\n  \n  const uint8Array = new Uint8Array(int16Array.buffer);\n  let binary = '';\n  const chunkSize = 0x8000;\n  \n  for (let i = 0; i < uint8Array.length; i += chunkSize) {\n    const chunk = uint8Array.subarray(i, Math.min(i + chunkSize, uint8Array.length));\n    binary += String.fromCharCode.apply(null, Array.from(chunk));\n  }\n  \n  return btoa(binary);\n};\n\nconst createWavFromPCM = (pcmData: Uint8Array) => {\n  const int16Data = new Int16Array(pcmData.length / 2);\n  for (let i = 0; i < pcmData.length; i += 2) {\n    int16Data[i / 2] = (pcmData[i + 1] << 8) | pcmData[i];\n  }\n  \n  const wavHeader = new ArrayBuffer(44);\n  const view = new DataView(wavHeader);\n  \n  const writeString = (view: DataView, offset: number, string: string) => {\n    for (let i = 0; i < string.length; i++) {\n      view.setUint8(offset + i, string.charCodeAt(i));\n    }\n  };\n\n  const sampleRate = 24000;\n  const numChannels = 1;\n  const bitsPerSample = 16;\n  const blockAlign = (numChannels * bitsPerSample) / 8;\n  const byteRate = sampleRate * blockAlign;\n\n  writeString(view, 0, 'RIFF');\n  view.setUint32(4, 36 + int16Data.byteLength, true);\n  writeString(view, 8, 'WAVE');\n  writeString(view, 12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, numChannels, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, byteRate, true);\n  view.setUint16(32, blockAlign, true);\n  view.setUint16(34, bitsPerSample, true);\n  writeString(view, 36, 'data');\n  view.setUint32(40, int16Data.byteLength, true);\n\n  const wavArray = new Uint8Array(wavHeader.byteLength + int16Data.byteLength);\n  wavArray.set(new Uint8Array(wavHeader), 0);\n  wavArray.set(new Uint8Array(int16Data.buffer), wavHeader.byteLength);\n  \n  return wavArray;\n};\n\nclass AudioQueue {\n  private queue: Uint8Array[] = [];\n  private isPlaying = false;\n  private audioContext: AudioContext;\n\n  constructor(audioContext: AudioContext) {\n    this.audioContext = audioContext;\n  }\n\n  async addToQueue(audioData: Uint8Array) {\n    this.queue.push(audioData);\n    if (!this.isPlaying) {\n      await this.playNext();\n    }\n  }\n\n  private async playNext() {\n    if (this.queue.length === 0) {\n      this.isPlaying = false;\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioData = this.queue.shift()!;\n\n    try {\n      const wavData = createWavFromPCM(audioData);\n      const audioBuffer = await this.audioContext.decodeAudioData(wavData.buffer);\n      \n      const source = this.audioContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(this.audioContext.destination);\n      \n      source.onended = () => this.playNext();\n      source.start(0);\n    } catch (error) {\n      console.error('Error playing audio:', error);\n      this.playNext();\n    }\n  }\n}\n\nlet audioQueueInstance: AudioQueue | null = null;\n\nexport const playAudioData = async (audioContext: AudioContext, audioData: Uint8Array) => {\n  if (!audioQueueInstance) {\n    audioQueueInstance = new AudioQueue(audioContext);\n  }\n  await audioQueueInstance.addToQueue(audioData);\n};\n\nexport class RealtimeChat {\n  private ws: WebSocket | null = null;\n  private audioContext: AudioContext | null = null;\n  private recorder: AudioRecorder | null = null;\n  private isConnected = false;\n\n  constructor(private onMessage: (message: any) => void) {}\n\n  async init() {\n    try {\n      this.audioContext = new AudioContext({ sampleRate: 24000 });\n      \n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error(\"User not authenticated\");\n      }\n\n      const wsUrl = `wss://bmtzgeffbzmcwmnprxmx.supabase.co/functions/v1/realtime-voice`;\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.isConnected = true;\n        this.startRecording();\n      };\n\n      this.ws.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('Received event:', data.type);\n          \n          if (data.type === 'response.audio.delta' && data.delta) {\n            const binaryString = atob(data.delta);\n            const bytes = new Uint8Array(binaryString.length);\n            for (let i = 0; i < binaryString.length; i++) {\n              bytes[i] = binaryString.charCodeAt(i);\n            }\n            if (this.audioContext) {\n              await playAudioData(this.audioContext, bytes);\n            }\n          }\n          \n          this.onMessage(data);\n        } catch (error) {\n          console.error('Error processing message:', error);\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket closed');\n        this.isConnected = false;\n        this.stopRecording();\n      };\n    } catch (error) {\n      console.error('Error initializing realtime chat:', error);\n      throw error;\n    }\n  }\n\n  private async startRecording() {\n    try {\n      this.recorder = new AudioRecorder((audioData) => {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n          const encoded = encodeAudioForAPI(audioData);\n          this.ws.send(JSON.stringify({\n            type: 'input_audio_buffer.append',\n            audio: encoded\n          }));\n        }\n      });\n      await this.recorder.start();\n    } catch (error) {\n      console.error('Error starting recording:', error);\n    }\n  }\n\n  private stopRecording() {\n    this.recorder?.stop();\n    this.recorder = null;\n  }\n\n  sendMessage(text: string) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      throw new Error('WebSocket not connected');\n    }\n\n    this.ws.send(JSON.stringify({\n      type: 'conversation.item.create',\n      item: {\n        type: 'message',\n        role: 'user',\n        content: [{ type: 'input_text', text }]\n      }\n    }));\n    \n    this.ws.send(JSON.stringify({ type: 'response.create' }));\n  }\n\n  disconnect() {\n    this.stopRecording();\n    this.ws?.close();\n    this.audioContext?.close();\n    this.isConnected = false;\n  }\n\n  getConnectionStatus() {\n    return this.isConnected;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\_shared\\http.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\_shared\\phi-redactor.ts","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":4,"column":29,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":4,"endColumn":30,"suggestions":[{"messageId":"removeEscape","fix":{"range":[221,222],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[221,221],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\/.","line":4,"column":55,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":4,"endColumn":56,"suggestions":[{"messageId":"removeEscape","fix":{"range":[247,248],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[247,247],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export function redactPHI(text: string): { redacted: string; hadPHI: boolean } {\r\n  const rules = [\r\n    { r: /\\b\\d{3}-\\d{2}-\\d{4}\\b/g },                                                // SSN\r\n    { r: /\\b(0[1-9]|1[0-2])[\\/-](0[1-9]|[12]\\d|3[01])[\\/-](19|20)\\d{2}\\b/g },          // DOB\r\n    { r: /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g },                                         // Phone\r\n    { r: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b/g },                    // Email\r\n    { r: /\\b(MRN|Medical Record)[ :#-]*[A-Z0-9]{6,}\\b/gi },                          // MRN\r\n    { r: /\\b([A-Z][a-z]+ [A-Z][a-z]+)\\b/g },                                         // Naive names\r\n  ];\r\n  let red = text, hit = false;\r\n  for (const { r } of rules) { if (r.test(red)) { hit = true; red = red.replace(r, \"[REDACTED]\"); } }\r\n  return { redacted: red, hadPHI: hit };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\analyze-clinical-notes\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\analyze-field\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\disclose\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2453,2456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2453,2456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2848,2851],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2848,2851],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2905,2908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2905,2908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3379,3382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3379,3382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5545,5548],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5545,5548],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5836,5839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5836,5839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5857,5860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5857,5860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":177,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5993,5996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5993,5996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6114,6117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6114,6117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// deno-lint-ignore-file no-explicit-any\n// Supabase Edge Function: Consent-validated disclosures (Part 2 aware)\nimport { serve } from \"https://deno.land/std@0.224.0/http/server.ts\";\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.4\";\n\ntype UUID = string;\n\ntype DisclosurePayload = {\n  consentId?: UUID; // Required if any resource is part2_protected\n  conversationIds?: UUID[];\n  noteIds?: UUID[]; // structured_notes\n  fileIds?: UUID[]; // uploaded_files\n};\n\ntype ResourceRow = {\n  id: UUID;\n  program_id: UUID | null;\n  data_classification: \"standard_phi\" | \"part2_protected\";\n  // ... (we don't need PHI content to disclose; client/export layer will format)\n};\n\nconst SUPABASE_URL = Deno.env.get(\"SUPABASE_URL\")!;\nconst SUPABASE_ANON_KEY = Deno.env.get(\"SUPABASE_ANON_KEY\")!;\nconst SERVICE_ROLE_KEY = Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\")!;\n\n// SECURITY FIX: Explicit default origin, reject requests without origin\nconst defaultOrigins = Deno.env.get(\"SUPABASE_URL\") ?? \"\";\nconst ALLOWED_ORIGINS = (Deno.env.get(\"DISCLOSE_CORS_ORIGINS\") ?? defaultOrigins)\n  .split(\",\")\n  .map(s => s.trim())\n  .filter(Boolean);\n\n// Feature flags (keep you safe during rollout)\nconst DISCLOSURE_GATE_ENABLED = (Deno.env.get(\"DISCLOSURE_GATE_ENABLED\") ?? \"true\") === \"true\";\n\nfunction allowCors(req: Request, res: Response) {\n  const origin = req.headers.get(\"Origin\") ?? \"\";\n  // SECURITY FIX: Require origin header and match against allowed list\n  const allow = origin && ALLOWED_ORIGINS.includes(origin);\n  const hdrs = new Headers(res.headers);\n  if (allow) {\n    hdrs.set(\"Access-Control-Allow-Origin\", origin);\n    hdrs.set(\"Vary\", \"Origin\");\n    hdrs.set(\"Access-Control-Allow-Methods\", \"POST, OPTIONS\");\n    hdrs.set(\"Access-Control-Allow-Headers\", \"authorization, content-type, x-disclosure-purpose\");\n    hdrs.set(\"Content-Security-Policy\", \"default-src 'self'; script-src 'self'; object-src 'none';\");\n    hdrs.set(\"X-Content-Type-Options\", \"nosniff\");\n    hdrs.set(\"X-Frame-Options\", \"DENY\");\n  }\n  return new Response(res.body, { status: res.status, headers: hdrs });\n}\n\nfunction json(status: number, body: unknown) {\n  return new Response(JSON.stringify(body), {\n    status,\n    headers: { \"content-type\": \"application/json; charset=utf-8\" },\n  });\n}\n\nfunction sanitizeErr(status: number, message: string) {\n  return json(status, { error: message });\n}\n\n// Basic schema check (avoid external deps)\nfunction parsePayload(obj: any): DisclosurePayload | null {\n  if (typeof obj !== \"object\" || obj === null) return null;\n  const p: DisclosurePayload = {};\n  if (obj.consentId !== undefined && typeof obj.consentId === \"string\") p.consentId = obj.consentId;\n  for (const key of [\"conversationIds\", \"noteIds\", \"fileIds\"] as const) {\n    if (obj[key] !== undefined) {\n      if (!Array.isArray(obj[key]) || !obj[key].every((v: any) => typeof v === \"string\")) return null;\n      (p as any)[key] = obj[key];\n    }\n  }\n  return p;\n}\n\nfunction getClientWithAuth(req: Request) {\n  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n    global: {\n      headers: { Authorization: req.headers.get(\"Authorization\") ?? \"\" },\n    },\n  });\n  return supabase;\n}\nfunction getAdmin() {\n  return createClient(SUPABASE_URL, SERVICE_ROLE_KEY);\n}\n\nfunction getIp(req: Request) {\n  return req.headers.get(\"x-forwarded-for\")?.split(\",\")[0]?.trim()\n      || (req as any).ip\n      || undefined;\n}\n\nasync function requireUser(req: Request) {\n  const supabase = getClientWithAuth(req);\n  const { data: { user }, error } = await supabase.auth.getUser();\n  if (error || !user) throw new Error(\"AUTH_REQUIRED\");\n  return user;\n}\n\n// SECURITY FIX: Use database-backed rate limiting instead of in-memory\nasync function checkRateLimit(userId: string): Promise<boolean> {\n  const admin = getAdmin();\n  const { data, error } = await admin.rpc('check_rate_limit', {\n    _user_id: userId,\n    _endpoint: 'disclose',\n    _max_requests: 10,\n    _window_minutes: 1\n  });\n  \n  if (error) {\n    console.error('Rate limit check failed:', error);\n    return false; // Fail closed\n  }\n  \n  return data === true;\n}\n\nasync function loadResources(req: Request, ids: DisclosurePayload) {\n  const client = getClientWithAuth(req);\n\n  const [convos, notes, files] = await Promise.all([\n    (async () => {\n      if (!ids.conversationIds?.length) return [] as ResourceRow[];\n      const { data, error } = await client\n        .from(\"conversations\")\n        .select(\"id, program_id, data_classification\")\n        .in(\"id\", ids.conversationIds);\n      if (error) throw new Error(\"LOAD_CONVERSATIONS_FAILED\");\n      return data as ResourceRow[];\n    })(),\n    (async () => {\n      if (!ids.noteIds?.length) return [] as ResourceRow[];\n      const { data, error } = await client\n        .from(\"structured_notes\")\n        .select(\"id, program_id, data_classification\")\n        .in(\"id\", ids.noteIds);\n      if (error) throw new Error(\"LOAD_NOTES_FAILED\");\n      return data as ResourceRow[];\n    })(),\n    (async () => {\n      if (!ids.fileIds?.length) return [] as ResourceRow[];\n      const { data, error } = await client\n        .from(\"uploaded_files\")\n        .select(\"id, program_id, data_classification\")\n        .in(\"id\", ids.fileIds);\n      if (error) throw new Error(\"LOAD_FILES_FAILED\");\n      return data as ResourceRow[];\n    })(),\n  ]);\n\n  return { convos, notes, files };\n}\n\ntype ConsentRow = {\n  id: UUID;\n  scope: Record<string, unknown>;\n  valid_from: string;\n  valid_until: string | null;\n  revoked_at: string | null;\n};\n\nfunction idsCovered(scope: any, allIds: UUID[]) {\n  // Supports scope like: { conversation_ids:[], note_ids:[], file_ids:[], program_id:\"...\" }\n  if (!scope || typeof scope !== \"object\") return false;\n\n  const byList = [\"conversation_ids\", \"note_ids\", \"file_ids\"].some((k) => {\n    const arr = Array.isArray((scope as any)[k]) ? (scope as any)[k] as string[] : [];\n    return allIds.every((id) => arr.includes(id));\n  });\n\n  return byList;\n}\n\nfunction programsCovered(scope: any, programs: (UUID | null)[]) {\n  if (!scope || typeof scope !== \"object\") return false;\n  const programId = (scope as any)[\"program_id\"];\n  if (typeof programId !== \"string\") return false;\n  // All part2 rows must be from that program\n  return programs.every((p) => p === programId);\n}\n\nfunction isWithinWindow(row: ConsentRow, now = new Date()) {\n  const from = new Date(row.valid_from);\n  const until = row.valid_until ? new Date(row.valid_until) : null;\n  if (now < from) return false;\n  if (until && now > until) return false;\n  if (row.revoked_at) return false;\n  return true;\n}\n\n// SECURITY FIX: Sanitize audit metadata before writing\nasync function writeAudit(\n  admin: ReturnType<typeof getAdmin>,\n  log: {\n    user_id: string;\n    action: \"disclosure_denied\" | \"disclosure_export\";\n    resource_ids: UUID[];\n    data_classification: \"standard_phi\" | \"part2_protected\";\n    program_id: UUID | null;\n    consent_id: UUID | null;\n    purpose: string | null;\n    ip: string | undefined;\n    ua: string | null;\n    meta?: Record<string, unknown>;\n  },\n) {\n  // Sanitize metadata to remove sensitive keys\n  const sanitizedMeta = log.meta ? \n    await admin.rpc('sanitize_audit_metadata', { meta: log.meta }).then(r => r.data || {}) :\n    {};\n\n  const { error } = await admin.from(\"audit_logs\").insert([{\n    user_id: log.user_id,\n    action: log.action,\n    resource_type: \"mixed\",\n    resource_id: log.resource_ids,\n    data_classification: log.data_classification,\n    program_id: log.program_id,\n    consent_id: log.consent_id,\n    purpose: log.purpose,\n    ip_address: log.ip,\n    user_agent: log.ua,\n    metadata: sanitizedMeta,\n  }]);\n  if (error) {\n    // Sanitize: don't bubble details\n    console.error(\"audit_insert_failed\", { status: error.code });\n  }\n}\n\nserve(async (req) => {\n  // CORS preflight\n  if (req.method === \"OPTIONS\") {\n    return allowCors(req, new Response(null, { status: 204 }));\n  }\n\n  try {\n    if (req.method !== \"POST\") {\n      return allowCors(req, sanitizeErr(405, \"Method not allowed\"));\n    }\n\n    // Auth\n    const user = await requireUser(req);\n    \n    // SECURITY FIX: Use database-backed rate limiting\n    const allowed = await checkRateLimit(user.id);\n    if (!allowed) {\n      return allowCors(req, sanitizeErr(429, \"Too many requests\"));\n    }\n\n    // Purpose header (optional but recommended)\n    const purpose = (req.headers.get(\"x-disclosure-purpose\") ?? \"\").toLowerCase() || null;\n\n    // Parse\n    const body = await req.json().catch(() => null);\n    const payload = parsePayload(body);\n    if (!payload) return allowCors(req, sanitizeErr(400, \"Invalid payload\"));\n\n    const idsAll = [\n      ...(payload.conversationIds ?? []),\n      ...(payload.noteIds ?? []),\n      ...(payload.fileIds ?? []),\n    ];\n    if (idsAll.length === 0) {\n      return allowCors(req, sanitizeErr(400, \"No resource IDs provided\"));\n    }\n\n    // Load (RLS applies)\n    const { convos, notes, files } = await loadResources(req, payload);\n    const rows: ResourceRow[] = [...convos, ...notes, ...files];\n\n    // Ensure caller actually has RLS access to all requested rows\n    const fetchedIds = new Set(rows.map(r => r.id));\n    const missing = idsAll.filter(id => !fetchedIds.has(id));\n    if (missing.length) {\n      return allowCors(req, sanitizeErr(403, \"One or more resources are not accessible\"));\n    }\n\n    // Determine classification & program set\n    const anyPart2 = rows.some(r => r.data_classification === \"part2_protected\");\n    const part2Programs = Array.from(new Set(rows\n      .filter(r => r.data_classification === \"part2_protected\")\n      .map(r => r.program_id)));\n\n    // Consent validation if Part 2\n    let consentRow: ConsentRow | null = null;\n    const admin = getAdmin();\n\n    if (DISCLOSURE_GATE_ENABLED && anyPart2) {\n      if (!payload.consentId) {\n        await writeAudit(admin, {\n          user_id: user.id,\n          action: \"disclosure_denied\",\n          resource_ids: idsAll,\n          data_classification: \"part2_protected\",\n          program_id: part2Programs.length === 1 ? (part2Programs[0] ?? null) : null,\n          consent_id: null,\n          purpose,\n          ip: getIp(req),\n          ua: req.headers.get(\"user-agent\"),\n          meta: { reason: \"missing_consent\" },\n        });\n        return allowCors(req, sanitizeErr(403, \"Valid consent required for Part 2 disclosures\"));\n      }\n\n      const { data, error } = await admin\n        .from(\"disclosure_consents\")\n        .select(\"id, scope, valid_from, valid_until, revoked_at\")\n        .eq(\"id\", payload.consentId)\n        .limit(1)\n        .maybeSingle();\n\n      if (error || !data || !isWithinWindow(data)) {\n        await writeAudit(admin, {\n          user_id: user.id,\n          action: \"disclosure_denied\",\n          resource_ids: idsAll,\n          data_classification: \"part2_protected\",\n          program_id: part2Programs.length === 1 ? (part2Programs[0] ?? null) : null,\n          consent_id: payload.consentId ?? null,\n          purpose,\n          ip: getIp(req),\n          ua: req.headers.get(\"user-agent\"),\n          meta: { reason: \"invalid_or_expired_consent\" },\n        });\n        return allowCors(req, sanitizeErr(403, \"Consent is invalid, expired, or revoked\"));\n      }\n\n      const allIds = idsAll;\n      const allPrograms = rows.filter(r => r.data_classification === \"part2_protected\").map(r => r.program_id);\n      const covered = idsCovered(data.scope, allIds) || programsCovered(data.scope, allPrograms);\n\n      if (!covered) {\n        await writeAudit(admin, {\n          user_id: user.id,\n          action: \"disclosure_denied\",\n          resource_ids: idsAll,\n          data_classification: \"part2_protected\",\n          program_id: part2Programs.length === 1 ? (part2Programs[0] ?? null) : null,\n          consent_id: payload.consentId ?? null,\n          purpose,\n          ip: getIp(req),\n          ua: req.headers.get(\"user-agent\"),\n          meta: { reason: \"scope_not_covered\" },\n        });\n        return allowCors(req, sanitizeErr(403, \"Consent scope does not cover requested records\"));\n      }\n\n      consentRow = data;\n    }\n\n    // Audit ALLOWED export\n    const overallClass: \"standard_phi\" | \"part2_protected\" = anyPart2 ? \"part2_protected\" : \"standard_phi\";\n    await writeAudit(getAdmin(), {\n      user_id: user.id,\n      action: \"disclosure_export\",\n      resource_ids: idsAll,\n      data_classification: overallClass,\n      program_id: part2Programs.length === 1 ? (part2Programs[0] ?? null) : null,\n      consent_id: consentRow?.id ?? null,\n      purpose,\n      ip: getIp(req),\n      ua: req.headers.get(\"user-agent\"),\n      meta: {\n        counts: { conversations: (payload.conversationIds ?? []).length, notes: (payload.noteIds ?? []).length, files: (payload.fileIds ?? []).length },\n      },\n    });\n\n    // Return a neutral export payload (no PHI content here).\n    // Your frontend/exporter can fetch/format content client-side or you can generate server-side files.\n    return allowCors(req, json(200, {\n      ok: true,\n      classification: overallClass,\n      ids: {\n        conversations: payload.conversationIds ?? [],\n        notes: payload.noteIds ?? [],\n        files: payload.fileIds ?? [],\n      },\n      // Optionally: include minimal metadata needed to drive an export UI flow\n    }));\n  } catch (e) {\n    if ((e as Error).message === \"AUTH_REQUIRED\") {\n      return allowCors(req, sanitizeErr(401, \"Unauthorized\"));\n    }\n    // Sanitized server log\n    console.error(\"disclose_unhandled\", { msg: (e as Error).message });\n    return allowCors(req, sanitizeErr(500, \"Unexpected error\"));\n  }\n});\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\password-reset\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\realtime-voice\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\secure-signup\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\supabase\\functions\\storage-upload-guard\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":102,"column":13,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":102,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\n    \"./pages/**/*.{ts,tsx}\",\n    \"./components/**/*.{ts,tsx}\",\n    \"./app/**/*.{ts,tsx}\",\n    \"./src/**/*.{ts,tsx}\",\n  ],\n  prefix: \"\",\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          \"0%\": { opacity: \"0\", transform: \"translateY(10px)\" },\n          \"100%\": { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"slide-in\": {\n          \"0%\": { transform: \"translateX(-100%)\", opacity: \"0\" },\n          \"100%\": { transform: \"translateX(0)\", opacity: \"1\" },\n        },\n        \"scale-in\": {\n          \"0%\": { transform: \"scale(0.95)\", opacity: \"0\" },\n          \"100%\": { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.3s ease-out\",\n        \"slide-in\": \"slide-in 0.3s ease-out\",\n        \"scale-in\": \"scale-in 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\test\\e2e\\smoke.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\vite-plugin-csp.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\Brian\\Desktop\\mental-scribe-app\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]eslint failed
